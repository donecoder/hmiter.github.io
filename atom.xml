<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄敏</title>
  <icon>https://www.gravatar.com/avatar/ce5b59858047484c6bb4b99b631fb3e9</icon>
  <subtitle>黄敏的博客!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mindasoft.com/"/>
  <updated>2018-11-23T08:20:49.481Z</updated>
  <id>http://mindasoft.com/</id>
  
  <author>
    <name>Huang min</name>
    <email>hmiter@sina.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaSE源码分析-Hashtable源码剖析</title>
    <link href="http://mindasoft.com/2018/11/23/javase/Hashtable%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>http://mindasoft.com/2018/11/23/javase/Hashtable源码剖析/</id>
    <published>2018-11-23T08:00:08.000Z</published>
    <updated>2018-11-23T08:20:49.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hashtable简介"><a href="#Hashtable简介" class="headerlink" title="Hashtable简介"></a>Hashtable简介</h1><p>Hashtable同样是基于哈希表实现的，同样每个元素是一个key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。<br>Hashtable也是JDK1.0引入的类，是线程安全的，能用于多线程环境中。<br>Hashtable同样实现了Serializable接口，它支持序列化，实现了Cloneable接口，能被克隆。</p><h1 id="HashTable源码剖析"><a href="#HashTable源码剖析" class="headerlink" title="HashTable源码剖析"></a>HashTable源码剖析</h1><p>Hashtable的源码的很多实现都与HashMap差不多，源码如下（加入了比较详细的注释）：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> java.util;    </span><br><span class="line"><span class="hljs-keyword">import</span> java.io.*;    </span><br><span class="line">   </span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hashtable</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;    </span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-keyword">extends</span> <span class="hljs-title">Dictionary</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;    </span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 保存key-value的数组。    </span></span><br><span class="line">    <span class="hljs-comment">// Hashtable同样采用单链表解决冲突，每一个Entry本质上是一个单向链表    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Entry[] table;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Hashtable中键值对的数量    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> count;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 阈值，用于判断是否需要调整Hashtable的容量（threshold = 容量*加载因子）    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> threshold;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 加载因子    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> loadFactor;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Hashtable被改变的次数，用于fail-fast机制的实现    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount = <span class="hljs-number">0</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 序列版本号    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1421746759512286392L</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 指定“容量大小”和“加载因子”的构造函数    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hashtable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal Capacity: "</span>+    </span><br><span class="line">                                               initialCapacity);    </span><br><span class="line">        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal Load: "</span>+loadFactor);    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">if</span> (initialCapacity==<span class="hljs-number">0</span>)    </span><br><span class="line">            initialCapacity = <span class="hljs-number">1</span>;    </span><br><span class="line">        <span class="hljs-keyword">this</span>.loadFactor = loadFactor;    </span><br><span class="line">        table = <span class="hljs-keyword">new</span> Entry[initialCapacity];    </span><br><span class="line">        threshold = (<span class="hljs-keyword">int</span>)(initialCapacity * loadFactor);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 指定“容量大小”的构造函数    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hashtable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">this</span>(initialCapacity, <span class="hljs-number">0.75f</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 默认构造函数。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hashtable</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 默认构造函数，指定的容量大小是11；加载因子是0.75    </span></span><br><span class="line">        <span class="hljs-keyword">this</span>(<span class="hljs-number">11</span>, <span class="hljs-number">0.75f</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 包含“子Map”的构造函数    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hashtable</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">this</span>(Math.max(<span class="hljs-number">2</span>*t.size(), <span class="hljs-number">11</span>), <span class="hljs-number">0.75f</span>);    </span><br><span class="line">        <span class="hljs-comment">// 将“子Map”的全部元素都添加到Hashtable中    </span></span><br><span class="line">        putAll(t);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> count;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“所有key”的枚举对象    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Enumeration&lt;K&gt; <span class="hljs-title">keys</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.&lt;K&gt;getEnumeration(KEYS);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“所有value”的枚举对象    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Enumeration&lt;V&gt; <span class="hljs-title">elements</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.&lt;V&gt;getEnumeration(VALUES);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 判断Hashtable是否包含“值(value)”    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object value)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">//注意，Hashtable中的value不能是null，    </span></span><br><span class="line">        <span class="hljs-comment">// 若是null的话，抛出异常!    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 从后向前遍历table数组中的元素(Entry)    </span></span><br><span class="line">        <span class="hljs-comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value    </span></span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tab.length ; i-- &gt; <span class="hljs-number">0</span> ;) &#123;    </span><br><span class="line">            <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">                <span class="hljs-keyword">if</span> (e.value.equals(value)) &#123;    </span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsValue</span><span class="hljs-params">(Object value)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> contains(value);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 判断Hashtable是否包含key    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="hljs-comment">//计算hash值，直接用key的hashCode代替  </span></span><br><span class="line">        <span class="hljs-keyword">int</span> hash = key.hashCode();      </span><br><span class="line">        <span class="hljs-comment">// 计算在数组中的索引值   </span></span><br><span class="line">        <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="hljs-comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回key对应的value，没有的话返回null    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="hljs-keyword">int</span> hash = key.hashCode();    </span><br><span class="line">        <span class="hljs-comment">// 计算索引值，    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="hljs-comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                <span class="hljs-keyword">return</span> e.value;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 调整Hashtable的长度，将长度变成原来的2倍+1   </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rehash</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">int</span> oldCapacity = table.length;    </span><br><span class="line">        Entry[] oldMap = table;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">//创建新容量大小的Entry数组  </span></span><br><span class="line">        <span class="hljs-keyword">int</span> newCapacity = oldCapacity * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;    </span><br><span class="line">        Entry[] newMap = <span class="hljs-keyword">new</span> Entry[newCapacity];    </span><br><span class="line">   </span><br><span class="line">        modCount++;    </span><br><span class="line">        threshold = (<span class="hljs-keyword">int</span>)(newCapacity * loadFactor);    </span><br><span class="line">        table = newMap;    </span><br><span class="line">          </span><br><span class="line">        <span class="hljs-comment">//将“旧的Hashtable”中的元素复制到“新的Hashtable”中  </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = oldCapacity ; i-- &gt; <span class="hljs-number">0</span> ;) &#123;    </span><br><span class="line">            <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; old = oldMap[i] ; old != <span class="hljs-keyword">null</span> ; ) &#123;    </span><br><span class="line">                Entry&lt;K,V&gt; e = old;    </span><br><span class="line">                old = old.next;    </span><br><span class="line">                <span class="hljs-comment">//重新计算index  </span></span><br><span class="line">                <span class="hljs-keyword">int</span> index = (e.hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % newCapacity;    </span><br><span class="line">                e.next = newMap[index];    </span><br><span class="line">                newMap[index] = e;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 将“key-value”添加到Hashtable中    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// Hashtable中不能插入value为null的元素！！！    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 若“Hashtable中已存在键为key的键值对”，    </span></span><br><span class="line">        <span class="hljs-comment">// 则用“新的value”替换“旧的value”    </span></span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="hljs-keyword">int</span> hash = key.hashCode();    </span><br><span class="line">        <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                V old = e.value;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                <span class="hljs-keyword">return</span> old;    </span><br><span class="line">                &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 若“Hashtable中不存在键为key的键值对”，  </span></span><br><span class="line">        <span class="hljs-comment">// 将“修改统计数”+1    </span></span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="hljs-comment">//  若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)    </span></span><br><span class="line">        <span class="hljs-comment">//  则调整Hashtable的大小    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (count &gt;= threshold) &#123;  </span><br><span class="line">            rehash();    </span><br><span class="line">   </span><br><span class="line">            tab = table;    </span><br><span class="line">            index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">//将新的key-value对插入到tab[index]处（即链表的头结点）  </span></span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];           </span><br><span class="line">        tab[index] = <span class="hljs-keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        count++;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 删除Hashtable中键为key的元素    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title">remove</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="hljs-keyword">int</span> hash = key.hashCode();    </span><br><span class="line">        <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">          </span><br><span class="line">        <span class="hljs-comment">//从table[index]链表中找出要删除的节点，并删除该节点。  </span></span><br><span class="line">        <span class="hljs-comment">//因为是单链表，因此要保留带删节点的前一个节点，才能有效地删除节点  </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="hljs-keyword">null</span> ; e != <span class="hljs-keyword">null</span> ; prev = e, e = e.next) &#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                modCount++;    </span><br><span class="line">                <span class="hljs-keyword">if</span> (prev != <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">                    prev.next = e.next;    </span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> &#123;    </span><br><span class="line">                    tab[index] = e.next;    </span><br><span class="line">                &#125;    </span><br><span class="line">                count--;    </span><br><span class="line">                V oldValue = e.value;    </span><br><span class="line">                e.value = <span class="hljs-keyword">null</span>;    </span><br><span class="line">                <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 将“Map(t)”的中全部元素逐一添加到Hashtable中    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putAll</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : t.entrySet())    </span><br><span class="line">            put(e.getKey(), e.getValue());    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 清空Hashtable    </span></span><br><span class="line">    <span class="hljs-comment">// 将Hashtable的table数组的值全部设为null    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = tab.length; --index &gt;= <span class="hljs-number">0</span>; )    </span><br><span class="line">            tab[index] = <span class="hljs-keyword">null</span>;    </span><br><span class="line">        count = <span class="hljs-number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 克隆一个Hashtable，并以Object的形式返回。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;    </span><br><span class="line">            Hashtable&lt;K,V&gt; t = (Hashtable&lt;K,V&gt;) <span class="hljs-keyword">super</span>.clone();    </span><br><span class="line">            t.table = <span class="hljs-keyword">new</span> Entry[table.length];    </span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = table.length ; i-- &gt; <span class="hljs-number">0</span> ; ) &#123;    </span><br><span class="line">                t.table[i] = (table[i] != <span class="hljs-keyword">null</span>)    </span><br><span class="line">                ? (Entry&lt;K,V&gt;) table[i].clone() : <span class="hljs-keyword">null</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">            t.keySet = <span class="hljs-keyword">null</span>;    </span><br><span class="line">            t.entrySet = <span class="hljs-keyword">null</span>;    </span><br><span class="line">            t.values = <span class="hljs-keyword">null</span>;    </span><br><span class="line">            t.modCount = <span class="hljs-number">0</span>;    </span><br><span class="line">            <span class="hljs-keyword">return</span> t;    </span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;     </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InternalError();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">int</span> max = size() - <span class="hljs-number">1</span>;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (max == -<span class="hljs-number">1</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"&#123;&#125;"</span>;    </span><br><span class="line">   </span><br><span class="line">        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();    </span><br><span class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; it = entrySet().iterator();    </span><br><span class="line">   </span><br><span class="line">        sb.append(<span class="hljs-string">'&#123;'</span>);    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; ; i++) &#123;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; e = it.next();    </span><br><span class="line">            K key = e.getKey();    </span><br><span class="line">            V value = e.getValue();    </span><br><span class="line">            sb.append(key   == <span class="hljs-keyword">this</span> ? <span class="hljs-string">"(this Map)"</span> : key.toString());    </span><br><span class="line">            sb.append(<span class="hljs-string">'='</span>);    </span><br><span class="line">            sb.append(value == <span class="hljs-keyword">this</span> ? <span class="hljs-string">"(this Map)"</span> : value.toString());    </span><br><span class="line">   </span><br><span class="line">            <span class="hljs-keyword">if</span> (i == max)    </span><br><span class="line">                <span class="hljs-keyword">return</span> sb.append(<span class="hljs-string">'&#125;'</span>).toString();    </span><br><span class="line">            sb.append(<span class="hljs-string">", "</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 获取Hashtable的枚举类对象    </span></span><br><span class="line">    <span class="hljs-comment">// 若Hashtable的实际大小为0,则返回“空枚举类”对象；    </span></span><br><span class="line">    <span class="hljs-comment">// 否则，返回正常的Enumerator的对象。   </span></span><br><span class="line">    <span class="hljs-keyword">private</span> &lt;T&gt; <span class="hljs-function">Enumeration&lt;T&gt; <span class="hljs-title">getEnumeration</span><span class="hljs-params">(<span class="hljs-keyword">int</span> type)</span> </span>&#123;    </span><br><span class="line">    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> (Enumeration&lt;T&gt;)emptyEnumerator;    </span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Enumerator&lt;T&gt;(type, <span class="hljs-keyword">false</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 获取Hashtable的迭代器    </span></span><br><span class="line">    <span class="hljs-comment">// 若Hashtable的实际大小为0,则返回“空迭代器”对象；    </span></span><br><span class="line">    <span class="hljs-comment">// 否则，返回正常的Enumerator的对象。(Enumerator实现了迭代器和枚举两个接口)    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> &lt;T&gt; <span class="hljs-function">Iterator&lt;T&gt; <span class="hljs-title">getIterator</span><span class="hljs-params">(<span class="hljs-keyword">int</span> type)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> (Iterator&lt;T&gt;) emptyIterator;    </span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Enumerator&lt;T&gt;(type, <span class="hljs-keyword">true</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Hashtable的“key的集合”。它是一个Set，没有重复元素    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Set&lt;K&gt; keySet = <span class="hljs-keyword">null</span>;    </span><br><span class="line">    <span class="hljs-comment">// Hashtable的“key-value的集合”。它是一个Set，没有重复元素    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="hljs-keyword">null</span>;    </span><br><span class="line">    <span class="hljs-comment">// Hashtable的“key-value的集合”。它是一个Collection，可以有重复元素    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Collection&lt;V&gt; values = <span class="hljs-keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回一个被synchronizedSet封装后的KeySet对象    </span></span><br><span class="line">    <span class="hljs-comment">// synchronizedSet封装的目的是对KeySet的所有方法都添加synchronized，实现多线程同步    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title">keySet</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (keySet == <span class="hljs-keyword">null</span>)    </span><br><span class="line">            keySet = Collections.synchronizedSet(<span class="hljs-keyword">new</span> KeySet(), <span class="hljs-keyword">this</span>);    </span><br><span class="line">        <span class="hljs-keyword">return</span> keySet;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Hashtable的Key的Set集合。    </span></span><br><span class="line">    <span class="hljs-comment">// KeySet继承于AbstractSet，所以，KeySet中的元素没有重复的。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeySet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSet</span>&lt;<span class="hljs-title">K</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;K&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> getIterator(KEYS);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> count;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> containsKey(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> Hashtable.<span class="hljs-keyword">this</span>.remove(o) != <span class="hljs-keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            Hashtable.<span class="hljs-keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回一个被synchronizedSet封装后的EntrySet对象    </span></span><br><span class="line">    <span class="hljs-comment">// synchronizedSet封装的目的是对EntrySet的所有方法都添加synchronized，实现多线程同步    </span></span><br><span class="line">    <span class="hljs-keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (entrySet==<span class="hljs-keyword">null</span>)    </span><br><span class="line">            entrySet = Collections.synchronizedSet(<span class="hljs-keyword">new</span> EntrySet(), <span class="hljs-keyword">this</span>);    </span><br><span class="line">        <span class="hljs-keyword">return</span> entrySet;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Hashtable的Entry的Set集合。    </span></span><br><span class="line">    <span class="hljs-comment">// EntrySet继承于AbstractSet，所以，EntrySet中的元素没有重复的。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EntrySet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSet</span>&lt;<span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> getIterator(ENTRIES);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Map.Entry&lt;K,V&gt; o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.add(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 查找EntrySet中是否包含Object(0)    </span></span><br><span class="line">        <span class="hljs-comment">// 首先，在table中找到o对应的Entry链表    </span></span><br><span class="line">        <span class="hljs-comment">// 然后，查找Entry链表中是否存在Object    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">            Map.Entry entry = (Map.Entry)o;    </span><br><span class="line">            Object key = entry.getKey();    </span><br><span class="line">            Entry[] tab = table;    </span><br><span class="line">            <span class="hljs-keyword">int</span> hash = key.hashCode();    </span><br><span class="line">            <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">   </span><br><span class="line">            <span class="hljs-keyword">for</span> (Entry e = tab[index]; e != <span class="hljs-keyword">null</span>; e = e.next)    </span><br><span class="line">                <span class="hljs-keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry))    </span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 删除元素Object(0)    </span></span><br><span class="line">        <span class="hljs-comment">// 首先，在table中找到o对应的Entry链表  </span></span><br><span class="line">        <span class="hljs-comment">// 然后，删除链表中的元素Object    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;    </span><br><span class="line">            K key = entry.getKey();    </span><br><span class="line">            Entry[] tab = table;    </span><br><span class="line">            <span class="hljs-keyword">int</span> hash = key.hashCode();    </span><br><span class="line">            <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">   </span><br><span class="line">            <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="hljs-keyword">null</span>; e != <span class="hljs-keyword">null</span>;    </span><br><span class="line">                 prev = e, e = e.next) &#123;    </span><br><span class="line">                <span class="hljs-keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry)) &#123;    </span><br><span class="line">                    modCount++;    </span><br><span class="line">                    <span class="hljs-keyword">if</span> (prev != <span class="hljs-keyword">null</span>)    </span><br><span class="line">                        prev.next = e.next;    </span><br><span class="line">                    <span class="hljs-keyword">else</span>   </span><br><span class="line">                        tab[index] = e.next;    </span><br><span class="line">   </span><br><span class="line">                    count--;    </span><br><span class="line">                    e.value = <span class="hljs-keyword">null</span>;    </span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> count;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            Hashtable.<span class="hljs-keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回一个被synchronizedCollection封装后的ValueCollection对象    </span></span><br><span class="line">    <span class="hljs-comment">// synchronizedCollection封装的目的是对ValueCollection的所有方法都添加synchronized，实现多线程同步    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;V&gt; <span class="hljs-title">values</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">    <span class="hljs-keyword">if</span> (values==<span class="hljs-keyword">null</span>)    </span><br><span class="line">        values = Collections.synchronizedCollection(<span class="hljs-keyword">new</span> ValueCollection(),    </span><br><span class="line">                                                        <span class="hljs-keyword">this</span>);    </span><br><span class="line">        <span class="hljs-keyword">return</span> values;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Hashtable的value的Collection集合。    </span></span><br><span class="line">    <span class="hljs-comment">// ValueCollection继承于AbstractCollection，所以，ValueCollection中的元素可以重复的。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValueCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCollection</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;V&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> getIterator(VALUES);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> count;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> containsValue(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            Hashtable.<span class="hljs-keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 重新equals()函数    </span></span><br><span class="line">    <span class="hljs-comment">// 若两个Hashtable的所有key-value键值对都相等，则判断它们两个相等    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">this</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map))    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        Map&lt;K,V&gt; t = (Map&lt;K,V&gt;) o;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (t.size() != size())    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;    </span><br><span class="line">            <span class="hljs-comment">// 通过迭代器依次取出当前Hashtable的key-value键值对    </span></span><br><span class="line">            <span class="hljs-comment">// 并判断该键值对，存在于Hashtable中。    </span></span><br><span class="line">            <span class="hljs-comment">// 若不存在，则立即返回false；否则，遍历完“当前Hashtable”并返回true。    </span></span><br><span class="line">            Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();    </span><br><span class="line">            <span class="hljs-keyword">while</span> (i.hasNext()) &#123;    </span><br><span class="line">                Map.Entry&lt;K,V&gt; e = i.next();    </span><br><span class="line">                K key = e.getKey();    </span><br><span class="line">                V value = e.getValue();    </span><br><span class="line">                <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">                    <span class="hljs-keyword">if</span> (!(t.get(key)==<span class="hljs-keyword">null</span> &amp;&amp; t.containsKey(key)))    </span><br><span class="line">                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> &#123;    </span><br><span class="line">                    <span class="hljs-keyword">if</span> (!value.equals(t.get(key)))    </span><br><span class="line">                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (ClassCastException unused)   &#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (NullPointerException unused) &#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 计算Entry的hashCode    </span></span><br><span class="line">    <span class="hljs-comment">// 若 Hashtable的实际大小为0 或者 加载因子&lt;0，则返回0。    </span></span><br><span class="line">    <span class="hljs-comment">// 否则，返回“Hashtable中的每个Entry的key和value的异或值 的总和”。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">int</span> h = <span class="hljs-number">0</span>;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span> || loadFactor &lt; <span class="hljs-number">0</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span> h;  <span class="hljs-comment">// Returns zero    </span></span><br><span class="line">   </span><br><span class="line">        loadFactor = -loadFactor;  <span class="hljs-comment">// Mark hashCode computation in progress    </span></span><br><span class="line">        Entry[] tab = table;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tab.length; i++)    </span><br><span class="line">            <span class="hljs-keyword">for</span> (Entry e = tab[i]; e != <span class="hljs-keyword">null</span>; e = e.next)    </span><br><span class="line">                h += e.key.hashCode() ^ e.value.hashCode();    </span><br><span class="line">        loadFactor = -loadFactor;  <span class="hljs-comment">// Mark hashCode computation complete    </span></span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">return</span> h;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// java.io.Serializable的写入函数    </span></span><br><span class="line">    <span class="hljs-comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”都写入到输出流中    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span>    </span></span><br><span class="line"><span class="hljs-function">        <span class="hljs-keyword">throws</span> IOException    </span></span><br><span class="line"><span class="hljs-function">    </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// Write out the length, threshold, loadfactor    </span></span><br><span class="line">        s.defaultWriteObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Write out length, count of elements and then the key/value objects    </span></span><br><span class="line">        s.writeInt(table.length);    </span><br><span class="line">        s.writeInt(count);    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = table.length-<span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--) &#123;    </span><br><span class="line">            Entry entry = table[index];    </span><br><span class="line">   </span><br><span class="line">            <span class="hljs-keyword">while</span> (entry != <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">            s.writeObject(entry.key);    </span><br><span class="line">            s.writeObject(entry.value);    </span><br><span class="line">            entry = entry.next;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></span><br><span class="line">    <span class="hljs-comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”依次读出    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span>    </span></span><br><span class="line"><span class="hljs-function">         <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException    </span></span><br><span class="line"><span class="hljs-function">    </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// Read in the length, threshold, and loadfactor    </span></span><br><span class="line">        s.defaultReadObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Read the original length of the array and number of elements    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> origlength = s.readInt();    </span><br><span class="line">        <span class="hljs-keyword">int</span> elements = s.readInt();    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Compute new size with a bit of room 5% to grow but    </span></span><br><span class="line">        <span class="hljs-comment">// no larger than the original size.  Make the length    </span></span><br><span class="line">        <span class="hljs-comment">// odd if it's large enough, this helps distribute the entries.    </span></span><br><span class="line">        <span class="hljs-comment">// Guard against the length ending up zero, that's not valid.    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> length = (<span class="hljs-keyword">int</span>)(elements * loadFactor) + (elements / <span class="hljs-number">20</span>) + <span class="hljs-number">3</span>;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)    </span><br><span class="line">            length--;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (origlength &gt; <span class="hljs-number">0</span> &amp;&amp; length &gt; origlength)    </span><br><span class="line">            length = origlength;    </span><br><span class="line">   </span><br><span class="line">        Entry[] table = <span class="hljs-keyword">new</span> Entry[length];    </span><br><span class="line">        count = <span class="hljs-number">0</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Read the number of elements and then all the key/value objects    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (; elements &gt; <span class="hljs-number">0</span>; elements--) &#123;    </span><br><span class="line">            K key = (K)s.readObject();    </span><br><span class="line">            V value = (V)s.readObject();    </span><br><span class="line">                <span class="hljs-comment">// synch could be eliminated for performance    </span></span><br><span class="line">                reconstitutionPut(table, key, value);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">this</span>.table = table;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reconstitutionPut</span><span class="hljs-params">(Entry[] tab, K key, V value)</span>    </span></span><br><span class="line"><span class="hljs-function">        <span class="hljs-keyword">throws</span> StreamCorruptedException    </span></span><br><span class="line"><span class="hljs-function">    </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> java.io.StreamCorruptedException();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-comment">// Makes sure the key is not already in the hashtable.    </span></span><br><span class="line">        <span class="hljs-comment">// This should not happen in deserialized version.    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> hash = key.hashCode();    </span><br><span class="line">        <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> java.io.StreamCorruptedException();    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-comment">// Creates the new entry.    </span></span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];    </span><br><span class="line">        tab[index] = <span class="hljs-keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        count++;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Hashtable的Entry节点，它本质上是一个单向链表。    </span></span><br><span class="line">    <span class="hljs-comment">// 也因此，我们才能推断出Hashtable是由拉链法实现的散列表    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 哈希值    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> hash;    </span><br><span class="line">        K key;    </span><br><span class="line">        V value;    </span><br><span class="line">        <span class="hljs-comment">// 指向的下一个Entry，即链表的下一个节点    </span></span><br><span class="line">        Entry&lt;K,V&gt; next;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 构造函数    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">Entry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">this</span>.hash = hash;    </span><br><span class="line">            <span class="hljs-keyword">this</span>.key = key;    </span><br><span class="line">            <span class="hljs-keyword">this</span>.value = value;    </span><br><span class="line">            <span class="hljs-keyword">this</span>.next = next;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Entry&lt;K,V&gt;(hash, key, value,    </span><br><span class="line">                  (next==<span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> key;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> value;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 设置value。若value是null，则抛出异常。    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">setValue</span><span class="hljs-params">(V value)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();    </span><br><span class="line">   </span><br><span class="line">            V oldValue = <span class="hljs-keyword">this</span>.value;    </span><br><span class="line">            <span class="hljs-keyword">this</span>.value = value;    </span><br><span class="line">            <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 覆盖equals()方法，判断两个Entry是否相等。    </span></span><br><span class="line">        <span class="hljs-comment">// 若两个Entry的key和value都相等，则认为它们相等。    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">            Map.Entry e = (Map.Entry)o;    </span><br><span class="line">   </span><br><span class="line">            <span class="hljs-keyword">return</span> (key==<span class="hljs-keyword">null</span> ? e.getKey()==<span class="hljs-keyword">null</span> : key.equals(e.getKey())) &amp;&amp;    </span><br><span class="line">               (value==<span class="hljs-keyword">null</span> ? e.getValue()==<span class="hljs-keyword">null</span> : value.equals(e.getValue()));    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> hash ^ (value==<span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : value.hashCode());    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> key.toString()+<span class="hljs-string">"="</span>+value.toString();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> KEYS = <span class="hljs-number">0</span>;    </span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> VALUES = <span class="hljs-number">1</span>;    </span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ENTRIES = <span class="hljs-number">2</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Enumerator的作用是提供了“通过elements()遍历Hashtable的接口” 和 “通过entrySet()遍历Hashtable的接口”。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Enumerator</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Enumeration</span>&lt;<span class="hljs-title">T</span>&gt;, <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 指向Hashtable的table    </span></span><br><span class="line">        Entry[] table = Hashtable.<span class="hljs-keyword">this</span>.table;    </span><br><span class="line">        <span class="hljs-comment">// Hashtable的总的大小    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> index = table.length;    </span><br><span class="line">        Entry&lt;K,V&gt; entry = <span class="hljs-keyword">null</span>;    </span><br><span class="line">        Entry&lt;K,V&gt; lastReturned = <span class="hljs-keyword">null</span>;    </span><br><span class="line">        <span class="hljs-keyword">int</span> type;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Enumerator是 “迭代器(Iterator)” 还是 “枚举类(Enumeration)”的标志    </span></span><br><span class="line">        <span class="hljs-comment">// iterator为true，表示它是迭代器；否则，是枚举类。    </span></span><br><span class="line">        <span class="hljs-keyword">boolean</span> iterator;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 在将Enumerator当作迭代器使用时会用到，用来实现fail-fast机制。    </span></span><br><span class="line">        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> expectedModCount = modCount;    </span><br><span class="line">   </span><br><span class="line">        Enumerator(<span class="hljs-keyword">int</span> type, <span class="hljs-keyword">boolean</span> iterator) &#123;    </span><br><span class="line">            <span class="hljs-keyword">this</span>.type = type;    </span><br><span class="line">            <span class="hljs-keyword">this</span>.iterator = iterator;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 从遍历table的数组的末尾向前查找，直到找到不为null的Entry。    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasMoreElements</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            Entry&lt;K,V&gt; e = entry;    </span><br><span class="line">            <span class="hljs-keyword">int</span> i = index;    </span><br><span class="line">            Entry[] t = table;    </span><br><span class="line">            <span class="hljs-comment">/* Use locals for faster loop iteration */</span>   </span><br><span class="line">            <span class="hljs-keyword">while</span> (e == <span class="hljs-keyword">null</span> &amp;&amp; i &gt; <span class="hljs-number">0</span>) &#123;    </span><br><span class="line">                e = t[--i];    </span><br><span class="line">            &#125;    </span><br><span class="line">            entry = e;    </span><br><span class="line">            index = i;    </span><br><span class="line">            <span class="hljs-keyword">return</span> e != <span class="hljs-keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 获取下一个元素    </span></span><br><span class="line">        <span class="hljs-comment">// 注意：从hasMoreElements() 和nextElement() 可以看出“Hashtable的elements()遍历方式”    </span></span><br><span class="line">        <span class="hljs-comment">// 首先，从后向前的遍历table数组。table数组的每个节点都是一个单向链表(Entry)。    </span></span><br><span class="line">        <span class="hljs-comment">// 然后，依次向后遍历单向链表Entry。    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">nextElement</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            Entry&lt;K,V&gt; et = entry;    </span><br><span class="line">            <span class="hljs-keyword">int</span> i = index;    </span><br><span class="line">            Entry[] t = table;    </span><br><span class="line">            <span class="hljs-comment">/* Use locals for faster loop iteration */</span>   </span><br><span class="line">            <span class="hljs-keyword">while</span> (et == <span class="hljs-keyword">null</span> &amp;&amp; i &gt; <span class="hljs-number">0</span>) &#123;    </span><br><span class="line">                et = t[--i];    </span><br><span class="line">            &#125;    </span><br><span class="line">            entry = et;    </span><br><span class="line">            index = i;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (et != <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">                Entry&lt;K,V&gt; e = lastReturned = entry;    </span><br><span class="line">                entry = e.next;    </span><br><span class="line">                <span class="hljs-keyword">return</span> type == KEYS ? (T)e.key : (type == VALUES ? (T)e.value : (T)e);    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException(<span class="hljs-string">"Hashtable Enumerator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 迭代器Iterator的判断是否存在下一个元素    </span></span><br><span class="line">        <span class="hljs-comment">// 实际上，它是调用的hasMoreElements()    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> hasMoreElements();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 迭代器获取下一个元素    </span></span><br><span class="line">        <span class="hljs-comment">// 实际上，它是调用的nextElement()    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            <span class="hljs-keyword">return</span> nextElement();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 迭代器的remove()接口。    </span></span><br><span class="line">        <span class="hljs-comment">// 首先，它在table数组中找出要删除元素所在的Entry，    </span></span><br><span class="line">        <span class="hljs-comment">// 然后，删除单向链表Entry中的元素。    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (!iterator)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();    </span><br><span class="line">            <span class="hljs-keyword">if</span> (lastReturned == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Hashtable Enumerator"</span>);    </span><br><span class="line">            <span class="hljs-keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">   </span><br><span class="line">            <span class="hljs-keyword">synchronized</span>(Hashtable.<span class="hljs-keyword">this</span>) &#123;    </span><br><span class="line">                Entry[] tab = Hashtable.<span class="hljs-keyword">this</span>.table;    </span><br><span class="line">                <span class="hljs-keyword">int</span> index = (lastReturned.hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">   </span><br><span class="line">                <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="hljs-keyword">null</span>; e != <span class="hljs-keyword">null</span>;    </span><br><span class="line">                     prev = e, e = e.next) &#123;    </span><br><span class="line">                    <span class="hljs-keyword">if</span> (e == lastReturned) &#123;    </span><br><span class="line">                        modCount++;    </span><br><span class="line">                        expectedModCount++;    </span><br><span class="line">                        <span class="hljs-keyword">if</span> (prev == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                            tab[index] = e.next;    </span><br><span class="line">                        <span class="hljs-keyword">else</span>   </span><br><span class="line">                            prev.next = e.next;    </span><br><span class="line">                        count--;    </span><br><span class="line">                        lastReturned = <span class="hljs-keyword">null</span>;    </span><br><span class="line">                        <span class="hljs-keyword">return</span>;    </span><br><span class="line">                    &#125;    </span><br><span class="line">                &#125;    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Enumeration emptyEnumerator = <span class="hljs-keyword">new</span> EmptyEnumerator();    </span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Iterator emptyIterator = <span class="hljs-keyword">new</span> EmptyIterator();    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 空枚举类    </span></span><br><span class="line">    <span class="hljs-comment">// 当Hashtable的实际大小为0；此时，又要通过Enumeration遍历Hashtable时，返回的是“空枚举类”的对象。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmptyEnumerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Enumeration</span>&lt;<span class="hljs-title">Object</span>&gt; </span>&#123;    </span><br><span class="line">   </span><br><span class="line">        EmptyEnumerator() &#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 空枚举类的hasMoreElements() 始终返回false    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasMoreElements</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 空枚举类的nextElement() 抛出异常    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">nextElement</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException(<span class="hljs-string">"Hashtable Enumerator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 空迭代器    </span></span><br><span class="line">    <span class="hljs-comment">// 当Hashtable的实际大小为0；此时，又要通过迭代器遍历Hashtable时，返回的是“空迭代器”的对象。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmptyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Object</span>&gt; </span>&#123;    </span><br><span class="line">   </span><br><span class="line">        EmptyIterator() &#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException(<span class="hljs-string">"Hashtable Iterator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Hashtable Iterator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="几点总结"><a href="#几点总结" class="headerlink" title="几点总结"></a>几点总结</h1><p>针对Hashtable，我们同样给出几点比较重要的总结，但要结合与HashMap的比较来总结。<br>1、二者的存储结构和解决冲突的方法都是相同的。</p><p>2、HashTable在不指定容量的情况下的默认容量为11，而HashMap为16，Hashtable不要求底层数组的容量一定要为2的整数次幂，而HashMap则要求一定为2的整数次幂。</p><p>3、Hashtable中key和value都不允许为null，而HashMap中key和value都允许为null（key只能有一个为null，而value则可以有多个为null）。但是如果在Hashtable中有类似put(null,null)的操作，编译同样可以通过，因为key和value都是Object类型，但运行时会抛出NullPointerException异常，这是JDK的规范规定的。我们来看下ContainsKey方法和ContainsValue的源码：</p><figure class="highlight processing hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 判断Hashtable是否包含“值(value)”    </span></span><br><span class="line"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-built_in">boolean</span> contains(<span class="hljs-keyword">Object</span> value) &#123;    </span><br><span class="line">     <span class="hljs-comment">//注意，Hashtable中的value不能是null，    </span></span><br><span class="line">     <span class="hljs-comment">// 若是null的话，抛出异常!    </span></span><br><span class="line">     <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();    </span><br><span class="line">     &#125;    </span><br><span class="line">  </span><br><span class="line">     <span class="hljs-comment">// 从后向前遍历table数组中的元素(Entry)    </span></span><br><span class="line">     <span class="hljs-comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value    </span></span><br><span class="line">     Entry tab[] = table;    </span><br><span class="line">     <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = tab.length ; i-- &gt; <span class="hljs-number">0</span> ;) &#123;    </span><br><span class="line">         <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">             <span class="hljs-keyword">if</span> (e.value.equals(value)) &#123;    </span><br><span class="line">                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">             &#125;    </span><br><span class="line">         &#125;    </span><br><span class="line">     &#125;    </span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line"> &#125;    </span><br><span class="line">  </span><br><span class="line"> <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> containsValue(<span class="hljs-keyword">Object</span> value) &#123;    </span><br><span class="line">     <span class="hljs-keyword">return</span> contains(value);    </span><br><span class="line"> &#125;    </span><br><span class="line">  </span><br><span class="line"> <span class="hljs-comment">// 判断Hashtable是否包含key    </span></span><br><span class="line"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-built_in">boolean</span> containsKey(<span class="hljs-keyword">Object</span> <span class="hljs-built_in">key</span>) &#123;    </span><br><span class="line">     Entry tab[] = table;    </span><br><span class="line">/计算hash值，直接用<span class="hljs-built_in">key</span>的hashCode代替  </span><br><span class="line">     <span class="hljs-built_in">int</span> hash = <span class="hljs-built_in">key</span>.hashCode();      </span><br><span class="line">     <span class="hljs-comment">// 计算在数组中的索引值   </span></span><br><span class="line">     <span class="hljs-built_in">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">     <span class="hljs-comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></span><br><span class="line">     <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">         <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.<span class="hljs-built_in">key</span>.equals(<span class="hljs-built_in">key</span>)) &#123;    </span><br><span class="line">             <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">         &#125;    </span><br><span class="line">     &#125;    </span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>很明显，如果value为null，会直接抛出NullPointerException异常，但源码中并没有对key是否为null判断，有点小不解！不过NullPointerException属于RuntimeException异常，是可以由JVM自动抛出的，也许对key的值在JVM中有所限制吧。</p><p>4、Hashtable扩容时，将容量变为原来的2倍加1，而HashMap扩容时，将容量变为原来的2倍。</p><p>5、Hashtable计算hash值，直接用key的hashCode()，而HashMap重新计算了key的hash值，Hashtable在求hash值对应的位置索引时，用取模运算，而HashMap在求位置索引时，则用与运算，且这里一般先用hash&amp;0x7FFFFFFF后，再对length取模，&amp;0x7FFFFFFF的目的是为了将负的hash值转化为正值，因为hash值有可能为负数，而&amp;0x7FFFFFFF后，只有符号外改变，而后面的位都不变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hashtable简介&quot;&gt;&lt;a href=&quot;#Hashtable简介&quot; class=&quot;headerlink&quot; title=&quot;Hashtable简介&quot;&gt;&lt;/a&gt;Hashtable简介&lt;/h1&gt;&lt;p&gt;Hashtable同样是基于哈希表实现的，同样每个元素是一个key-
      
    
    </summary>
    
      <category term="JavaSE源码分析" scheme="http://mindasoft.com/categories/JavaSE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码分析" scheme="http://mindasoft.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JavaSE" scheme="http://mindasoft.com/tags/JavaSE/"/>
    
      <category term="Hashtable" scheme="http://mindasoft.com/tags/Hashtable/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE源码分析-HashMap源码剖析</title>
    <link href="http://mindasoft.com/2018/11/23/javase/HashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>http://mindasoft.com/2018/11/23/javase/HashMap源码剖析/</id>
    <published>2018-11-23T07:29:37.000Z</published>
    <updated>2018-11-23T08:20:49.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h1><p>HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。<br>HashMap是非线程安全的，只是用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。<br>HashMap 实现了Serializable接口，因此它支持序列化，实现了Cloneable接口，能被克隆。</p><h1 id="HashMap源码剖析"><a href="#HashMap源码剖析" class="headerlink" title="HashMap源码剖析"></a>HashMap源码剖析</h1><p>HashMap的源码如下(加入了比较详细的注释)：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> java.util;    </span><br><span class="line"><span class="hljs-keyword">import</span> java.io.*;    </span><br><span class="line">   </span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;    </span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;    </span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">Serializable</span>    </span></span><br><span class="line"><span class="hljs-class"></span>&#123;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 默认的初始容量（容量为HashMap中槽的数目）是16，且实际容量必须是2的整数次幂。    </span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">16</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）    </span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXIMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 默认加载因子为0.75   </span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 存储数据的Entry数组，长度是2的幂。    </span></span><br><span class="line">    <span class="hljs-comment">// HashMap采用链表法解决冲突，每一个Entry本质上是一个单向链表    </span></span><br><span class="line">    <span class="hljs-keyword">transient</span> Entry[] table;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// HashMap的底层数组中已用槽的数量    </span></span><br><span class="line">    <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量*加载因子）    </span></span><br><span class="line">    <span class="hljs-keyword">int</span> threshold;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 加载因子实际大小    </span></span><br><span class="line">    <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// HashMap被改变的次数    </span></span><br><span class="line">    <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> modCount;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 指定“容量大小”和“加载因子”的构造函数    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal initial capacity: "</span> +    </span><br><span class="line">                                               initialCapacity);    </span><br><span class="line">        <span class="hljs-comment">// HashMap的最大容量只能是MAXIMUM_CAPACITY    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)    </span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;    </span><br><span class="line">        <span class="hljs-comment">//加载因此不能小于0  </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))    </span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal load factor: "</span> +    </span><br><span class="line">                                               loadFactor);    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 找出“大于initialCapacity”的最小的2的幂    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> capacity = <span class="hljs-number">1</span>;    </span><br><span class="line">        <span class="hljs-keyword">while</span> (capacity &lt; initialCapacity)    </span><br><span class="line">            capacity &lt;&lt;= <span class="hljs-number">1</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 设置“加载因子”    </span></span><br><span class="line">        <span class="hljs-keyword">this</span>.loadFactor = loadFactor;    </span><br><span class="line">        <span class="hljs-comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。    </span></span><br><span class="line">        threshold = (<span class="hljs-keyword">int</span>)(capacity * loadFactor);    </span><br><span class="line">        <span class="hljs-comment">// 创建Entry数组，用来保存数据    </span></span><br><span class="line">        table = <span class="hljs-keyword">new</span> Entry[capacity];    </span><br><span class="line">        init();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 指定“容量大小”的构造函数    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 默认构造函数。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 设置“加载因子”为默认加载因子0.75    </span></span><br><span class="line">        <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;    </span><br><span class="line">        <span class="hljs-comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。    </span></span><br><span class="line">        threshold = (<span class="hljs-keyword">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);    </span><br><span class="line">        <span class="hljs-comment">// 创建Entry数组，用来保存数据    </span></span><br><span class="line">        table = <span class="hljs-keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];    </span><br><span class="line">        init();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 包含“子Map”的构造函数    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">this</span>(Math.max((<span class="hljs-keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="hljs-number">1</span>,    </span><br><span class="line">                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);    </span><br><span class="line">        <span class="hljs-comment">// 将m中的全部元素逐个添加到HashMap中    </span></span><br><span class="line">        putAllForCreate(m);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">//求hash值的方法，重新计算hash值  </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h)</span> </span>&#123;    </span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="hljs-number">20</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">12</span>);    </span><br><span class="line">        <span class="hljs-keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="hljs-number">7</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">4</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回h在数组中的索引值，这里用&amp;代替取模，旨在提升效率   </span></span><br><span class="line">    <span class="hljs-comment">// h &amp; (length-1)保证返回值的小于length    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> length)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> h &amp; (length-<span class="hljs-number">1</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> size;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 获取key对应的value    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span> getForNullKey();    </span><br><span class="line">        <span class="hljs-comment">// 获取key的hash值    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> hash = hash(key.hashCode());    </span><br><span class="line">        <span class="hljs-comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </span><br><span class="line">             e != <span class="hljs-keyword">null</span>;    </span><br><span class="line">             e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="hljs-comment">//判断key是否相同  </span></span><br><span class="line">            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))    </span><br><span class="line">                <span class="hljs-keyword">return</span> e.value;    </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="hljs-comment">//没找到则返回null  </span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 获取“key为null”的元素的值    </span></span><br><span class="line">    <span class="hljs-comment">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> V <span class="hljs-title">getForNullKey</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="hljs-number">0</span>]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e.key == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                <span class="hljs-keyword">return</span> e.value;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// HashMap是否包含key    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> getEntry(key) != <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“键为key”的键值对    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">final</span> Entry&lt;K,V&gt; <span class="hljs-title">getEntry</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 获取哈希值    </span></span><br><span class="line">        <span class="hljs-comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> hash = (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="hljs-comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </span><br><span class="line">             e != <span class="hljs-keyword">null</span>;    </span><br><span class="line">             e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;    </span><br><span class="line">                ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))    </span><br><span class="line">                <span class="hljs-keyword">return</span> e;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 将“key-value”添加到HashMap中    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 若“key为null”，则将该键值对添加到table[0]中。    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span> putForNullKey(value);    </span><br><span class="line">        <span class="hljs-comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> hash = hash(key.hashCode());    </span><br><span class="line">        <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="hljs-comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！    </span></span><br><span class="line">            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;    </span><br><span class="line">                V oldValue = e.value;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                e.recordAccess(<span class="hljs-keyword">this</span>);    </span><br><span class="line">                <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中    </span></span><br><span class="line">        modCount++;  </span><br><span class="line">        <span class="hljs-comment">//将key-value添加到table[i]处  </span></span><br><span class="line">        addEntry(hash, key, value, i);    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> V <span class="hljs-title">putForNullKey</span><span class="hljs-params">(V value)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="hljs-number">0</span>]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e.key == <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">                V oldValue = e.value;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                e.recordAccess(<span class="hljs-keyword">this</span>);    </span><br><span class="line">                <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-comment">// 如果没有存在key为null的键值对，则直接题阿见到table[0]处!    </span></span><br><span class="line">        modCount++;    </span><br><span class="line">        addEntry(<span class="hljs-number">0</span>, <span class="hljs-keyword">null</span>, value, <span class="hljs-number">0</span>);    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 创建HashMap对应的“添加方法”，    </span></span><br><span class="line">    <span class="hljs-comment">// 它和put()不同。putForCreate()是内部方法，它被构造函数等调用，用来创建HashMap    </span></span><br><span class="line">    <span class="hljs-comment">// 而put()是对外提供的往HashMap中添加元素的方法。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putForCreate</span><span class="hljs-params">(K key, V value)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">int</span> hash = (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 若该HashMap表中存在“键值等于key”的元素，则替换该元素的value值    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;    </span><br><span class="line">                ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k)))) &#123;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                <span class="hljs-keyword">return</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 若该HashMap表中不存在“键值等于key”的元素，则将该key-value添加到HashMap中    </span></span><br><span class="line">        createEntry(hash, key, value, i);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 将“m”中的全部元素都添加到HashMap中。    </span></span><br><span class="line">    <span class="hljs-comment">// 该方法被内部的构造HashMap的方法所调用。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putAllForCreate</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 利用迭代器将元素逐个添加到HashMap中    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;    </span><br><span class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();    </span><br><span class="line">            putForCreate(e.getKey(), e.getValue());    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 重新调整HashMap的大小，newCapacity是调整后的容量    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newCapacity)</span> </span>&#123;    </span><br><span class="line">        Entry[] oldTable = table;    </span><br><span class="line">        <span class="hljs-keyword">int</span> oldCapacity = oldTable.length;   </span><br><span class="line">        <span class="hljs-comment">//如果就容量已经达到了最大值，则不能再扩容，直接返回  </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;    </span><br><span class="line">            threshold = Integer.MAX_VALUE;    </span><br><span class="line">            <span class="hljs-keyword">return</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，    </span></span><br><span class="line">        <span class="hljs-comment">// 然后，将“新HashMap”赋值给“旧HashMap”。    </span></span><br><span class="line">        Entry[] newTable = <span class="hljs-keyword">new</span> Entry[newCapacity];    </span><br><span class="line">        transfer(newTable);    </span><br><span class="line">        table = newTable;    </span><br><span class="line">        threshold = (<span class="hljs-keyword">int</span>)(newCapacity * loadFactor);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 将HashMap中的全部元素都添加到newTable中    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Entry[] newTable)</span> </span>&#123;    </span><br><span class="line">        Entry[] src = table;    </span><br><span class="line">        <span class="hljs-keyword">int</span> newCapacity = newTable.length;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; src.length; j++) &#123;    </span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">                src[j] = <span class="hljs-keyword">null</span>;    </span><br><span class="line">                <span class="hljs-keyword">do</span> &#123;    </span><br><span class="line">                    Entry&lt;K,V&gt; next = e.next;    </span><br><span class="line">                    <span class="hljs-keyword">int</span> i = indexFor(e.hash, newCapacity);    </span><br><span class="line">                    e.next = newTable[i];    </span><br><span class="line">                    newTable[i] = e;    </span><br><span class="line">                    e = next;    </span><br><span class="line">                &#125; <span class="hljs-keyword">while</span> (e != <span class="hljs-keyword">null</span>);    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 将"m"的全部元素都添加到HashMap中    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putAll</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 有效性判断    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> numKeysToBeAdded = m.size();    </span><br><span class="line">        <span class="hljs-keyword">if</span> (numKeysToBeAdded == <span class="hljs-number">0</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 计算容量是否足够，    </span></span><br><span class="line">        <span class="hljs-comment">// 若“当前阀值容量 &lt; 需要的容量”，则将容量x2。    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;    </span><br><span class="line">            <span class="hljs-keyword">int</span> targetCapacity = (<span class="hljs-keyword">int</span>)(numKeysToBeAdded / loadFactor + <span class="hljs-number">1</span>);    </span><br><span class="line">            <span class="hljs-keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)    </span><br><span class="line">                targetCapacity = MAXIMUM_CAPACITY;    </span><br><span class="line">            <span class="hljs-keyword">int</span> newCapacity = table.length;    </span><br><span class="line">            <span class="hljs-keyword">while</span> (newCapacity &lt; targetCapacity)    </span><br><span class="line">                newCapacity &lt;&lt;= <span class="hljs-number">1</span>;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (newCapacity &gt; table.length)    </span><br><span class="line">                resize(newCapacity);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 通过迭代器，将“m”中的元素逐个添加到HashMap中。    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;    </span><br><span class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();    </span><br><span class="line">            put(e.getKey(), e.getValue());    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 删除“键为key”元素    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">remove</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry&lt;K,V&gt; e = removeEntryForKey(key);    </span><br><span class="line">        <span class="hljs-keyword">return</span> (e == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : e.value);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 删除“键为key”的元素    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">final</span> Entry&lt;K,V&gt; <span class="hljs-title">removeEntryForKey</span><span class="hljs-params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> hash = (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];    </span><br><span class="line">        Entry&lt;K,V&gt; e = prev;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 删除链表中“键为key”的元素    </span></span><br><span class="line">        <span class="hljs-comment">// 本质是“删除单向链表中的节点”    </span></span><br><span class="line">        <span class="hljs-keyword">while</span> (e != <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;    </span><br><span class="line">                ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k)))) &#123;    </span><br><span class="line">                modCount++;    </span><br><span class="line">                size--;    </span><br><span class="line">                <span class="hljs-keyword">if</span> (prev == e)    </span><br><span class="line">                    table[i] = next;    </span><br><span class="line">                <span class="hljs-keyword">else</span>   </span><br><span class="line">                    prev.next = next;    </span><br><span class="line">                e.recordRemoval(<span class="hljs-keyword">this</span>);    </span><br><span class="line">                <span class="hljs-keyword">return</span> e;    </span><br><span class="line">            &#125;    </span><br><span class="line">            prev = e;    </span><br><span class="line">            e = next;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">return</span> e;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 删除“键值对”    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">final</span> Entry&lt;K,V&gt; <span class="hljs-title">removeMapping</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;    </span><br><span class="line">        Object key = entry.getKey();    </span><br><span class="line">        <span class="hljs-keyword">int</span> hash = (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];    </span><br><span class="line">        Entry&lt;K,V&gt; e = prev;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 删除链表中的“键值对e”    </span></span><br><span class="line">        <span class="hljs-comment">// 本质是“删除单向链表中的节点”    </span></span><br><span class="line">        <span class="hljs-keyword">while</span> (e != <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; e.equals(entry)) &#123;    </span><br><span class="line">                modCount++;    </span><br><span class="line">                size--;    </span><br><span class="line">                <span class="hljs-keyword">if</span> (prev == e)    </span><br><span class="line">                    table[i] = next;    </span><br><span class="line">                <span class="hljs-keyword">else</span>   </span><br><span class="line">                    prev.next = next;    </span><br><span class="line">                e.recordRemoval(<span class="hljs-keyword">this</span>);    </span><br><span class="line">                <span class="hljs-keyword">return</span> e;    </span><br><span class="line">            &#125;    </span><br><span class="line">            prev = e;    </span><br><span class="line">            e = next;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">return</span> e;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 清空HashMap，将所有的元素设为null    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        modCount++;    </span><br><span class="line">        Entry[] tab = table;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tab.length; i++)    </span><br><span class="line">            tab[i] = <span class="hljs-keyword">null</span>;    </span><br><span class="line">        size = <span class="hljs-number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 是否包含“值为value”的元素    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsValue</span><span class="hljs-params">(Object value)</span> </span>&#123;    </span><br><span class="line">    <span class="hljs-comment">// 若“value为null”，则调用containsNullValue()查找    </span></span><br><span class="line">    <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span> containsNullValue();    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。    </span></span><br><span class="line">    Entry[] tab = table;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tab.length ; i++)    </span><br><span class="line">            <span class="hljs-keyword">for</span> (Entry e = tab[i] ; e != <span class="hljs-keyword">null</span> ; e = e.next)    </span><br><span class="line">                <span class="hljs-keyword">if</span> (value.equals(e.value))    </span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 是否包含null值    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsNullValue</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">    Entry[] tab = table;    </span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tab.length ; i++)    </span><br><span class="line">            <span class="hljs-keyword">for</span> (Entry e = tab[i] ; e != <span class="hljs-keyword">null</span> ; e = e.next)    </span><br><span class="line">                <span class="hljs-keyword">if</span> (e.value == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 克隆一个HashMap，并返回Object对象    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        HashMap&lt;K,V&gt; result = <span class="hljs-keyword">null</span>;    </span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;    </span><br><span class="line">            result = (HashMap&lt;K,V&gt;)<span class="hljs-keyword">super</span>.clone();    </span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;    </span><br><span class="line">            <span class="hljs-comment">// assert false;    </span></span><br><span class="line">        &#125;    </span><br><span class="line">        result.table = <span class="hljs-keyword">new</span> Entry[table.length];    </span><br><span class="line">        result.entrySet = <span class="hljs-keyword">null</span>;    </span><br><span class="line">        result.modCount = <span class="hljs-number">0</span>;    </span><br><span class="line">        result.size = <span class="hljs-number">0</span>;    </span><br><span class="line">        result.init();    </span><br><span class="line">        <span class="hljs-comment">// 调用putAllForCreate()将全部元素添加到HashMap中    </span></span><br><span class="line">        result.putAllForCreate(<span class="hljs-keyword">this</span>);    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-keyword">return</span> result;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Entry是单向链表。    </span></span><br><span class="line">    <span class="hljs-comment">// 它是 “HashMap链式存储法”对应的链表。    </span></span><br><span class="line">    <span class="hljs-comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数    </span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">final</span> K key;    </span><br><span class="line">        V value;    </span><br><span class="line">        <span class="hljs-comment">// 指向下一个节点    </span></span><br><span class="line">        Entry&lt;K,V&gt; next;    </span><br><span class="line">        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> hash;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 构造函数。    </span></span><br><span class="line">        <span class="hljs-comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"    </span></span><br><span class="line">        Entry(<span class="hljs-keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;    </span><br><span class="line">            value = v;    </span><br><span class="line">            next = n;    </span><br><span class="line">            key = k;    </span><br><span class="line">            hash = h;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> key;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> value;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">setValue</span><span class="hljs-params">(V newValue)</span> </span>&#123;    </span><br><span class="line">            V oldValue = value;    </span><br><span class="line">            value = newValue;    </span><br><span class="line">            <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 判断两个Entry是否相等    </span></span><br><span class="line">        <span class="hljs-comment">// 若两个Entry的“key”和“value”都相等，则返回true。    </span></span><br><span class="line">        <span class="hljs-comment">// 否则，返回false    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">            Map.Entry e = (Map.Entry)o;    </span><br><span class="line">            Object k1 = getKey();    </span><br><span class="line">            Object k2 = e.getKey();    </span><br><span class="line">            <span class="hljs-keyword">if</span> (k1 == k2 || (k1 != <span class="hljs-keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;    </span><br><span class="line">                Object v1 = getValue();    </span><br><span class="line">                Object v2 = e.getValue();    </span><br><span class="line">                <span class="hljs-keyword">if</span> (v1 == v2 || (v1 != <span class="hljs-keyword">null</span> &amp;&amp; v1.equals(v2)))    </span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 实现hashCode()    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> (key==<span class="hljs-keyword">null</span>   ? <span class="hljs-number">0</span> : key.hashCode()) ^    </span><br><span class="line">                   (value==<span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : value.hashCode());    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> getKey() + <span class="hljs-string">"="</span> + getValue();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 当向HashMap中添加元素时，绘调用recordAccess()。    </span></span><br><span class="line">        <span class="hljs-comment">// 这里不做任何处理    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recordAccess</span><span class="hljs-params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。    </span></span><br><span class="line">        <span class="hljs-comment">// 这里不做任何处理    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recordRemoval</span><span class="hljs-params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> bucketIndex)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 保存“bucketIndex”位置的值到“e”中    </span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];    </span><br><span class="line">        <span class="hljs-comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></span><br><span class="line">        <span class="hljs-comment">// 设置“e”为“新Entry的下一个节点”    </span></span><br><span class="line">        table[bucketIndex] = <span class="hljs-keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        <span class="hljs-comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (size++ &gt;= threshold)    </span><br><span class="line">            resize(<span class="hljs-number">2</span> * table.length);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 创建Entry。将“key-value”插入指定位置。    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> bucketIndex)</span> </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 保存“bucketIndex”位置的值到“e”中    </span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];    </span><br><span class="line">        <span class="hljs-comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></span><br><span class="line">        <span class="hljs-comment">// 设置“e”为“新Entry的下一个节点”    </span></span><br><span class="line">        table[bucketIndex] = <span class="hljs-keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        size++;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。    </span></span><br><span class="line">    <span class="hljs-comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashIterator</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// 下一个元素    </span></span><br><span class="line">        Entry&lt;K,V&gt; next;    </span><br><span class="line">        <span class="hljs-comment">// expectedModCount用于实现fast-fail机制。    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> expectedModCount;    </span><br><span class="line">        <span class="hljs-comment">// 当前索引    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> index;    </span><br><span class="line">        <span class="hljs-comment">// 当前元素    </span></span><br><span class="line">        Entry&lt;K,V&gt; current;    </span><br><span class="line">   </span><br><span class="line">        HashIterator() &#123;    </span><br><span class="line">            expectedModCount = modCount;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// advance to first entry    </span></span><br><span class="line">                Entry[] t = table;    </span><br><span class="line">                <span class="hljs-comment">// 将next指向table中第一个不为null的元素。    </span></span><br><span class="line">                <span class="hljs-comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。    </span></span><br><span class="line">                <span class="hljs-keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                    ;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> next != <span class="hljs-keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 获取下一个元素    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">final</span> Entry&lt;K,V&gt; <span class="hljs-title">nextEntry</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            Entry&lt;K,V&gt; e = next;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();    </span><br><span class="line">   </span><br><span class="line">            <span class="hljs-comment">// 注意！！！    </span></span><br><span class="line">            <span class="hljs-comment">// 一个Entry就是一个单向链表    </span></span><br><span class="line">            <span class="hljs-comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;    </span></span><br><span class="line">            <span class="hljs-comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。    </span></span><br><span class="line">            <span class="hljs-keyword">if</span> ((next = e.next) == <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">                Entry[] t = table;    </span><br><span class="line">                <span class="hljs-keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                    ;    </span><br><span class="line">            &#125;    </span><br><span class="line">            current = e;    </span><br><span class="line">            <span class="hljs-keyword">return</span> e;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// 删除当前元素    </span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (current == <span class="hljs-keyword">null</span>)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException();    </span><br><span class="line">            <span class="hljs-keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            Object k = current.key;    </span><br><span class="line">            current = <span class="hljs-keyword">null</span>;    </span><br><span class="line">            HashMap.<span class="hljs-keyword">this</span>.removeEntryForKey(k);    </span><br><span class="line">            expectedModCount = modCount;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// value的迭代器    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValueIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashIterator</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> nextEntry().value;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// key的迭代器    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashIterator</span>&lt;<span class="hljs-title">K</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> nextEntry().getKey();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Entry的迭代器    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EntryIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HashIterator</span>&lt;<span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">public</span> Map.<span class="hljs-function">Entry&lt;K,V&gt; <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> nextEntry();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回一个“key迭代器”    </span></span><br><span class="line">    <span class="hljs-function">Iterator&lt;K&gt; <span class="hljs-title">newKeyIterator</span><span class="hljs-params">()</span>   </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> KeyIterator();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="hljs-comment">// 返回一个“value迭代器”    </span></span><br><span class="line">    <span class="hljs-function">Iterator&lt;V&gt; <span class="hljs-title">newValueIterator</span><span class="hljs-params">()</span>   </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ValueIterator();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="hljs-comment">// 返回一个“entry迭代器”    </span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> EntryIterator();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// HashMap的Entry对应的集合    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="hljs-keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“key的集合”，实际上返回一个“KeySet对象”    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title">keySet</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        Set&lt;K&gt; ks = keySet;    </span><br><span class="line">        <span class="hljs-keyword">return</span> (ks != <span class="hljs-keyword">null</span> ? ks : (keySet = <span class="hljs-keyword">new</span> KeySet()));    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// Key对应的集合    </span></span><br><span class="line">    <span class="hljs-comment">// KeySet继承于AbstractSet，说明该集合中没有重复的Key。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeySet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSet</span>&lt;<span class="hljs-title">K</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;K&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> newKeyIterator();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> size;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> containsKey(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> HashMap.<span class="hljs-keyword">this</span>.removeEntryForKey(o) != <span class="hljs-keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            HashMap.<span class="hljs-keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“value集合”，实际上返回的是一个Values对象    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;V&gt; <span class="hljs-title">values</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">        Collection&lt;V&gt; vs = values;    </span><br><span class="line">        <span class="hljs-keyword">return</span> (vs != <span class="hljs-keyword">null</span> ? vs : (values = <span class="hljs-keyword">new</span> Values()));    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// “value集合”    </span></span><br><span class="line">    <span class="hljs-comment">// Values继承于AbstractCollection，不同于“KeySet继承于AbstractSet”，    </span></span><br><span class="line">    <span class="hljs-comment">// Values中的元素能够重复。因为不同的key可以指向相同的value。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Values</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCollection</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;V&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> newValueIterator();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> size;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> containsValue(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            HashMap.<span class="hljs-keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“HashMap的Entry集合”    </span></span><br><span class="line">    <span class="hljs-keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> entrySet0();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;    </span><br><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;    </span><br><span class="line">        <span class="hljs-keyword">return</span> es != <span class="hljs-keyword">null</span> ? es : (entrySet = <span class="hljs-keyword">new</span> EntrySet());    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// EntrySet对应的集合    </span></span><br><span class="line">    <span class="hljs-comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。    </span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EntrySet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSet</span>&lt;<span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;&gt; </span>&#123;    </span><br><span class="line">        <span class="hljs-keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> newEntryIterator();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;    </span><br><span class="line">            Entry&lt;K,V&gt; candidate = getEntry(e.getKey());    </span><br><span class="line">            <span class="hljs-keyword">return</span> candidate != <span class="hljs-keyword">null</span> &amp;&amp; candidate.equals(e);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> removeMapping(o) != <span class="hljs-keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            <span class="hljs-keyword">return</span> size;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;    </span><br><span class="line">            HashMap.<span class="hljs-keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// java.io.Serializable的写入函数    </span></span><br><span class="line">    <span class="hljs-comment">// 将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span>    </span></span><br><span class="line"><span class="hljs-function">        <span class="hljs-keyword">throws</span> IOException    </span></span><br><span class="line"><span class="hljs-function">    </span>&#123;    </span><br><span class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =    </span><br><span class="line">            (size &gt; <span class="hljs-number">0</span>) ? entrySet0().iterator() : <span class="hljs-keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Write out the threshold, loadfactor, and any hidden stuff    </span></span><br><span class="line">        s.defaultWriteObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Write out number of buckets    </span></span><br><span class="line">        s.writeInt(table.length);    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Write out size (number of Mappings)    </span></span><br><span class="line">        s.writeInt(size);    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Write out keys and values (alternating)    </span></span><br><span class="line">        <span class="hljs-keyword">if</span> (i != <span class="hljs-keyword">null</span>) &#123;    </span><br><span class="line">            <span class="hljs-keyword">while</span> (i.hasNext()) &#123;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; e = i.next();    </span><br><span class="line">            s.writeObject(e.getKey());    </span><br><span class="line">            s.writeObject(e.getValue());    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">362498820763181265L</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></span><br><span class="line">    <span class="hljs-comment">// 将HashMap的“总的容量，实际容量，所有的Entry”依次读出    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span>    </span></span><br><span class="line"><span class="hljs-function">         <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException    </span></span><br><span class="line"><span class="hljs-function">    </span>&#123;    </span><br><span class="line">        <span class="hljs-comment">// Read in the threshold, loadfactor, and any hidden stuff    </span></span><br><span class="line">        s.defaultReadObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Read in number of buckets and allocate the bucket array;    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> numBuckets = s.readInt();    </span><br><span class="line">        table = <span class="hljs-keyword">new</span> Entry[numBuckets];    </span><br><span class="line">   </span><br><span class="line">        init();  <span class="hljs-comment">// Give subclass a chance to do its thing.    </span></span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Read in size (number of Mappings)    </span></span><br><span class="line">        <span class="hljs-keyword">int</span> size = s.readInt();    </span><br><span class="line">   </span><br><span class="line">        <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap    </span></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++) &#123;    </span><br><span class="line">            K key = (K) s.readObject();    </span><br><span class="line">            V value = (V) s.readObject();    </span><br><span class="line">            putForCreate(key, value);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="hljs-comment">// 返回“HashMap总的容量”    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span>   <span class="hljs-title">capacity</span><span class="hljs-params">()</span>     </span>&#123; <span class="hljs-keyword">return</span> table.length; &#125;    </span><br><span class="line">    <span class="hljs-comment">// 返回“HashMap的加载因子”    </span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">loadFactor</span><span class="hljs-params">()</span>   </span>&#123; <span class="hljs-keyword">return</span> loadFactor;   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="几点总结"><a href="#几点总结" class="headerlink" title="几点总结"></a>几点总结</h1><p>1、首先要清楚HashMap的存储结构，如下图所示：<br><img src="/images/hashmap.jpeg" alt="HashMap的存储结构"><br>图中，紫色部分即代表哈希表，也称为哈希数组，数组的每个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。</p><p>2、首先看链表中节点的数据结构：<br><figure class="highlight processing hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Entry是单向链表。    </span></span><br><span class="line"><span class="hljs-comment">// 它是 “HashMap链式存储法”对应的链表。    </span></span><br><span class="line"><span class="hljs-comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数    </span></span><br><span class="line"><span class="hljs-keyword">static</span> class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;    </span><br><span class="line">    <span class="hljs-keyword">final</span> K <span class="hljs-built_in">key</span>;    </span><br><span class="line">    V value;    </span><br><span class="line">    <span class="hljs-comment">// 指向下一个节点    </span></span><br><span class="line">    Entry&lt;K,V&gt; next;    </span><br><span class="line">    <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> hash;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 构造函数。    </span></span><br><span class="line">    <span class="hljs-comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"    </span></span><br><span class="line">    Entry(<span class="hljs-built_in">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;    </span><br><span class="line">        value = v;    </span><br><span class="line">        next = n;    </span><br><span class="line">        <span class="hljs-built_in">key</span> = k;    </span><br><span class="line">        hash = h;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> K getKey() &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">key</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V getValue() &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> value;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V setValue(V newValue) &#123;    </span><br><span class="line">        V oldValue = value;    </span><br><span class="line">        value = newValue;    </span><br><span class="line">        <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 判断两个Entry是否相等    </span></span><br><span class="line">    <span class="hljs-comment">// 若两个Entry的“key”和“value”都相等，则返回true。    </span></span><br><span class="line">    <span class="hljs-comment">// 否则，返回false    </span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">boolean</span> equals(<span class="hljs-keyword">Object</span> o) &#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))    </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">        Map.Entry e = (Map.Entry)o;    </span><br><span class="line">        <span class="hljs-keyword">Object</span> k1 = getKey();    </span><br><span class="line">        <span class="hljs-keyword">Object</span> k2 = e.getKey();    </span><br><span class="line">        <span class="hljs-keyword">if</span> (k1 == k2 || (k1 != <span class="hljs-keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;    </span><br><span class="line">            <span class="hljs-keyword">Object</span> v1 = getValue();    </span><br><span class="line">            <span class="hljs-keyword">Object</span> v2 = e.getValue();    </span><br><span class="line">            <span class="hljs-keyword">if</span> (v1 == v2 || (v1 != <span class="hljs-keyword">null</span> &amp;&amp; v1.equals(v2)))    </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 实现hashCode()    </span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> hashCode() &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">key</span>==<span class="hljs-keyword">null</span>   ? <span class="hljs-number">0</span> : <span class="hljs-built_in">key</span>.hashCode()) ^    </span><br><span class="line">               (value==<span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : value.hashCode());    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> toString() &#123;    </span><br><span class="line">        <span class="hljs-keyword">return</span> getKey() + <span class="hljs-string">"="</span> + getValue();    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 当向HashMap中添加元素时，绘调用recordAccess()。    </span></span><br><span class="line">    <span class="hljs-comment">// 这里不做任何处理    </span></span><br><span class="line">    <span class="hljs-keyword">void</span> recordAccess(<span class="hljs-keyword">HashMap</span>&lt;K,V&gt; m) &#123;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。    </span></span><br><span class="line">    <span class="hljs-comment">// 这里不做任何处理    </span></span><br><span class="line">    <span class="hljs-keyword">void</span> recordRemoval(<span class="hljs-keyword">HashMap</span>&lt;K,V&gt; m) &#123;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它的结构元素除了key、value、hash外，还有next，next指向下一个节点。另外，这里覆写了equals和hashCode方法来保证键值对的独一无二。<br>3、HashMap共有四个构造方法。构造方法中提到了两个很重要的参数：初始容量和加载因子。这两个参数是影响HashMap性能的重要参数，<label style="color:red">其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（从构造函数中可以看出，如果不指明，则默认为16），加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 resize 操作（即扩容）。<br>下面说下加载因子，如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），对空间造成严重浪费。如果我们在构造方法中不指定，则系统默认加载因子为0.75，这是一个比较理想的值，一般情况下我们是无需修改的。<br>另外，无论我们指定的容量为多少，构造方法都会将实际容量设为不小于指定容量的2的次方的一个数，且最大值不能超过2的30次方</label><br>4、HashMap中key和value都允许为null。<br>5、要重点分析下HashMap中用的最多的两个方法put和get。先从比较简单的get方法着手，源码如下：</p><figure class="highlight processing hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 获取key对应的value    </span></span><br><span class="line"><span class="hljs-keyword">public</span> V <span class="hljs-built_in">get</span>(<span class="hljs-keyword">Object</span> <span class="hljs-built_in">key</span>) &#123;    </span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">key</span> == <span class="hljs-keyword">null</span>)    </span><br><span class="line">        <span class="hljs-keyword">return</span> getForNullKey();    </span><br><span class="line">    <span class="hljs-comment">// 获取key的hash值    </span></span><br><span class="line">    <span class="hljs-built_in">int</span> hash = hash(<span class="hljs-built_in">key</span>.hashCode());    </span><br><span class="line">    <span class="hljs-comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></span><br><span class="line">    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </span><br><span class="line">         e != <span class="hljs-keyword">null</span>;    </span><br><span class="line">         e = e.next) &#123;    </span><br><span class="line">        <span class="hljs-keyword">Object</span> k;    </span><br><span class="line">/判断<span class="hljs-built_in">key</span>是否相同  </span><br><span class="line">        <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="hljs-built_in">key</span>) == <span class="hljs-built_in">key</span> || <span class="hljs-built_in">key</span>.equals(k)))    </span><br><span class="line">            <span class="hljs-keyword">return</span> e.value;    </span><br><span class="line">    &#125;  </span><br><span class="line">没找到则返回<span class="hljs-keyword">null</span>  </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">// 获取“key为null”的元素的值    </span></span><br><span class="line"><span class="hljs-comment">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！    </span></span><br><span class="line"><span class="hljs-keyword">private</span> V getForNullKey() &#123;    </span><br><span class="line">    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="hljs-number">0</span>]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (e.<span class="hljs-built_in">key</span> == <span class="hljs-keyword">null</span>)    </span><br><span class="line">            <span class="hljs-keyword">return</span> e.value;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。<br>如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。<br>put方法稍微复杂些，代码如下：<br><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">// 将“key-value”添加到HashMap中    </span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span>(<span class="hljs-params">K key, V <span class="hljs-keyword">value</span></span>)</span> &#123;    </span><br><span class="line">      <span class="hljs-comment">// 若“key为null”，则将该键值对添加到table[0]中。    </span></span><br><span class="line">      <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)    </span><br><span class="line">          <span class="hljs-keyword">return</span> putForNullKey(<span class="hljs-keyword">value</span>);    </span><br><span class="line">      <span class="hljs-comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。    </span></span><br><span class="line">      <span class="hljs-keyword">int</span> hash = hash(key.hashCode());    </span><br><span class="line">      <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">      <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;    </span><br><span class="line">          Object k;    </span><br><span class="line">          <span class="hljs-comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！    </span></span><br><span class="line">          <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.<span class="hljs-keyword">equals</span>(k))) &#123;    </span><br><span class="line">              V oldValue = e.<span class="hljs-keyword">value</span>;    </span><br><span class="line">              e.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">value</span>;    </span><br><span class="line">              e.recordAccess(<span class="hljs-keyword">this</span>);    </span><br><span class="line">              <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">          &#125;    </span><br><span class="line">      &#125;    </span><br><span class="line">  </span><br><span class="line">      <span class="hljs-comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中    </span></span><br><span class="line">      modCount++;  </span><br><span class="line"><span class="hljs-comment">//将key-value添加到table[i]处  </span></span><br><span class="line">      addEntry(hash, key, <span class="hljs-keyword">value</span>, i);    </span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>如果key为null，则将其添加到table[0]对应的链表中，putForNullKey的源码如下：<br><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置    </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> V <span class="hljs-title">putForNullKey</span>(<span class="hljs-params">V <span class="hljs-keyword">value</span></span>)</span> &#123;    </span><br><span class="line">    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="hljs-number">0</span>]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;    </span><br><span class="line">        <span class="hljs-keyword">if</span> (e.key == <span class="hljs-literal">null</span>) &#123;    </span><br><span class="line">            V oldValue = e.<span class="hljs-keyword">value</span>;    </span><br><span class="line">            e.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">value</span>;    </span><br><span class="line">            e.recordAccess(<span class="hljs-keyword">this</span>);    </span><br><span class="line">            <span class="hljs-keyword">return</span> oldValue;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="hljs-comment">// 如果没有存在key为null的键值对，则直接题阿见到table[0]处!    </span></span><br><span class="line">    modCount++;    </span><br><span class="line">    addEntry(<span class="hljs-number">0</span>, <span class="hljs-literal">null</span>, <span class="hljs-keyword">value</span>, <span class="hljs-number">0</span>);    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，比将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到改单链表的头结点位置（每次新插入的节点都是放在头结点的位置），该操作是有addEntry方法实现的，它的源码如下：</p><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。    </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEntry</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> hash, K key, V <span class="hljs-keyword">value</span>, <span class="hljs-keyword">int</span> bucketIndex</span>)</span> &#123;    </span><br><span class="line">    <span class="hljs-comment">// 保存“bucketIndex”位置的值到“e”中    </span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];    </span><br><span class="line">    <span class="hljs-comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></span><br><span class="line">    <span class="hljs-comment">// 设置“e”为“新Entry的下一个节点”    </span></span><br><span class="line">    table[bucketIndex] = <span class="hljs-keyword">new</span> Entry&lt;K,V&gt;(hash, key, <span class="hljs-keyword">value</span>, e);    </span><br><span class="line">    <span class="hljs-comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小    </span></span><br><span class="line">    <span class="hljs-keyword">if</span> (size++ &gt;= threshold)    </span><br><span class="line">        resize(<span class="hljs-number">2</span> * table.length);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里倒数第三行的构造方法，将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。<br>两外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。<br>6、关于扩容。上面我们看到了扩容的方法，resize方法，它的源码如下：<br><figure class="highlight haxe hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 重新调整HashMap的大小，newCapacity是调整后的单位    </span></span><br><span class="line">void resize(int <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>) &#123;    </span><br><span class="line">    Entry[] oldTable = table;    </span><br><span class="line">    int oldCapacity = oldTable.length;    </span><br><span class="line">    <span class="hljs-keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;    </span><br><span class="line">        threshold = Integer.MAX_VALUE;    </span><br><span class="line">        <span class="hljs-keyword">return</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，    </span></span><br><span class="line">    <span class="hljs-comment">// 然后，将“新HashMap”赋值给“旧HashMap”。    </span></span><br><span class="line">    Entry[] <span class="hljs-keyword">new</span><span class="hljs-type">Table</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">Entry</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>];    </span><br><span class="line">    transfer(<span class="hljs-keyword">new</span><span class="hljs-type">Table</span>);    </span><br><span class="line">    table = <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>;    </span><br><span class="line">    threshold = (int)(<span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span> * loadFactor);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显，是新建了一个HashMap的底层数组，而后调用transfer方法，将就HashMap的全部元素添加到新的HashMap中（要重新计算元素在新的数组中的索引位置）。transfer方法的源码如下：</p><figure class="highlight haxe hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 将HashMap中的全部元素都添加到newTable中    </span></span><br><span class="line">void transfer(Entry[] <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>) &#123;    </span><br><span class="line">    Entry[] src = table;    </span><br><span class="line">    int <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>.length;    </span><br><span class="line">    <span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j &lt; src.length; j++) &#123;    </span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];    </span><br><span class="line">        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;    </span><br><span class="line">            src[j] = <span class="hljs-literal">null</span>;    </span><br><span class="line">            <span class="hljs-keyword">do</span> &#123;    </span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;    </span><br><span class="line">                int i = indexFor(e.hash, <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>);    </span><br><span class="line">                e.next = <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>[i];    </span><br><span class="line">                <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>[i] = e;    </span><br><span class="line">                e = next;    </span><br><span class="line">            &#125; <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，扩容是一个相当耗时的操作，因为它需要重新计算这些元素在新的数组中的位置并进行复制处理。因此，我们在用HashMap的时，最好能提前预估下HashMap中元素的个数，这样有助于提高HashMap的性能。</p><p>7、注意containsKey方法和containsValue方法。前者直接可以通过key的哈希值将搜索范围定位到指定索引对应的链表，而后者要对哈希数组的每个链表进行搜索。</p><p>8、我们重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。<br>计算哈希值的方法如下：<br><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">static</span> int hash(int h) &#123;  </span><br><span class="line">        <span class="hljs-attribute">h</span><span class="hljs-regexp"> ^=</span> (h &gt;&gt;&gt; <span class="hljs-number">20</span>)<span class="hljs-regexp"> ^</span> (h &gt;&gt;&gt; <span class="hljs-number">12</span>);  </span><br><span class="line">        <span class="hljs-attribute">return</span> h<span class="hljs-regexp"> ^</span> (h &gt;&gt;&gt; <span class="hljs-number">7</span>)<span class="hljs-regexp"> ^</span> (h &gt;&gt;&gt; <span class="hljs-number">4</span>);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>它只是一个数学公式，IDK这样设计对hash值的计算，自然有它的好处，至于为什么这样设计，我们这里不去追究，只要明白一点，用的位的操作使hash值的计算效率很高。</p><p>由hash值找到对应索引的方法如下：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> length)</span> </span>&#123;  </span><br><span class="line">        <span class="hljs-keyword">return</span> h &amp; (length<span class="hljs-number">-1</span>);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这个我们要重点说下，我们一般对哈希表的散列很自然地会想到用hash值对length取模（即除法散列法），Hashtable中也是这样实现的，这种方法基本能保证元素在哈希表中散列的比较均匀，但取模会用到除法运算，效率很低，HashMap中则通过h&amp;(length-1)的方法来代替取模，同样实现了均匀的散列，但效率要高很多，这也是HashMap对Hashtable的一个改进。</p><p>接下来，我们分析下为什么哈希表的容量一定要是2的整数次幂。首先，length为2的整数次幂的话，h&amp;(length-1)就相当于对length取模，这样便保证了散列的均匀，同时也提升了效率；其次，length为2的整数次幂的话，为偶数，这样length-1为奇数，奇数的最后一位是1，这样便保证了h&amp;(length-1)的最后一位可能为0，也可能为1（这取决于h的值），即与后的结果可能为偶数，也可能为奇数，这样便可以保证散列的均匀性，而如果length为奇数的话，很明显length-1为偶数，它的最后一位是0，这样h&amp;(length-1)的最后一位肯定为0，即只能为偶数，这样任何hash值都只会被散列到数组的偶数下标位置上，这便浪费了近一半的空间，因此，length取2的整数次幂，是为了使不同hash值发生碰撞的概率较小，这样就能使元素在哈希表中均匀地散列。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HashMap简介&quot;&gt;&lt;a href=&quot;#HashMap简介&quot; class=&quot;headerlink&quot; title=&quot;HashMap简介&quot;&gt;&lt;/a&gt;HashMap简介&lt;/h1&gt;&lt;p&gt;HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单
      
    
    </summary>
    
      <category term="JavaSE源码分析" scheme="http://mindasoft.com/categories/JavaSE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码分析" scheme="http://mindasoft.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JavaSE" scheme="http://mindasoft.com/tags/JavaSE/"/>
    
      <category term="HashMap" scheme="http://mindasoft.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>lambda与函数式</title>
    <link href="http://mindasoft.com/2018/11/13/Java/lambda%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    <id>http://mindasoft.com/2018/11/13/Java/lambda与函数式/</id>
    <published>2018-11-13T14:29:37.000Z</published>
    <updated>2018-11-22T08:28:37.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Lambda表达式是Java SE 8才引进的新特性。对于只申明一个函数的接口，它提供了一个简单和简洁的编写方式。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight livescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-params">(参数...)</span> -&gt;</span> &#123; 代码块 &#125;</span><br></pre></td></tr></table></figure><p>有三种格式：<br><figure class="highlight livescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-params">(params)</span> -&gt;</span> expression</span><br><span class="line"><span class="hljs-function"><span class="hljs-params">(params)</span> -&gt;</span> statement</span><br><span class="line"><span class="hljs-function"><span class="hljs-params">(params)</span> -&gt;</span> &#123; statements &#125;</span><br></pre></td></tr></table></figure></p><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>像Comparator这样的只有一个抽象方法的接口，叫做函数式接口（Functional Interface）。与Comparator类似，其他函数式接口的唯一的抽象方法也可以用lambda来表示。</p><p>我们看一下Comparator的源码，发现其多了一个@FunctionalInterface的注解，用来表明它是一个函数式接口。标记了该注解的接口有且仅有一个抽象方法，否则会报编译错误。</p><p>再看一下其他的仅有一个抽象方法的接口，比如Runnable和Callable，发现也都在Java 8之后加了@FunctionalInterface注解。对于Runnable来说，接口定义如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@FunctionalInterface</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不难推测，其lambda的写法应该是 () -&gt; { body }，它不接收任何参数，方法体中也无return返回值，用起来像这样：<br><figure class="highlight livescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Thread<span class="hljs-function"><span class="hljs-params">(() -&gt; &#123;doSomething();&#125;)</span>;</span></span><br></pre></td></tr></table></figure></p><p>此外，随lambda一同增加的还有一个java.util.function包，其中定义了一些常见的函数式接口的。比如：</p><ul><li>Function，接受一个输入参数，返回一个结果。参数与返回值的类型可以不同，我们之前的map方法内的lambda就是表示这个函数式接口的；</li><li>Consumer，接受一个输入参数并且无返回的操作。比如我们针对数据流的每一个元素进行打印，就可以用基于Consumer的lambda；</li><li>Supplier，无需输入参数，只返回结果。看接口名就知道是发挥了对象工厂的作用；</li><li>Predicate，接受一个输入参数，返回一个布尔值结果。比如我们在对数据流中的元素进行筛选的时候，就可以用基于Predicate的lambda；</li><li>…</li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="Runnable-Lambda"><a href="#Runnable-Lambda" class="headerlink" title="Runnable Lambda"></a>Runnable Lambda</h2><p>我们可以使用Lambda表达式写一个Runnable测试程序：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunnableTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//匿名内部类</span></span><br><span class="line">        Runnable r1 = <span class="hljs-keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="hljs-string">"hello Runnable 1!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//Lambda</span></span><br><span class="line">        Runnable r2 = ()-&gt; System.out.println(<span class="hljs-string">"hello Runnable 2"</span>);</span><br><span class="line"></span><br><span class="line">        r1.run();</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Comparator-Lambda"><a href="#Comparator-Lambda" class="headerlink" title="Comparator Lambda"></a>Comparator Lambda</h2><p>下面是java.util.Comparator的例子：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">enum</span> Gender &#123; MALE, FEMALE &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String givenName;</span><br><span class="line">    <span class="hljs-keyword">private</span> String surName;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;</span><br><span class="line">    <span class="hljs-keyword">private</span> Gender gender;</span><br><span class="line">    <span class="hljs-keyword">private</span> String eMail;</span><br><span class="line">    <span class="hljs-keyword">private</span> String phone;</span><br><span class="line">    <span class="hljs-keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComparatorTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = Person.createShortList();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//匿名内部类</span></span><br><span class="line">        Collections.sort(personList, <span class="hljs-keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> o1.getSurName().compareTo(o2.getSurName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(Person p: personList)&#123;</span><br><span class="line">            p.printName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//lambda 1</span></span><br><span class="line">        Collections.sort(personList, (Person o1, Person o2)-&gt;o1.getSurName().compareTo(o2.getSurName()));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(Person p: personList)&#123;</span><br><span class="line">            p.printName();</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="hljs-comment">//lambda 2</span></span><br><span class="line">        Collections.sort(personList, (o1, o2)-&gt;o1.getSurName().compareTo(o2.getSurName()));</span><br><span class="line">        <span class="hljs-keyword">for</span>(Person p: personList)&#123;</span><br><span class="line">            p.printName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的lambda 1和lambda 2中的参数可以看到，我们传入的o1, o2可以不用指定它的类型，编译器能够自动判断。（为什么？java.lang.Comparator接口只有一个方法）</p><h2 id="Listener-Lambda"><a href="#Listener-Lambda" class="headerlink" title="Listener Lambda"></a>Listener Lambda</h2><p>最后，我们再看一下ActionListenter的例子：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.awt.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="hljs-keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListenerTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JButton testButton = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">"button"</span>);</span><br><span class="line">        testButton.addActionListener(<span class="hljs-keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="hljs-string">"click button, 匿名内部类"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        testButton.addActionListener(event -&gt; System.out.println(<span class="hljs-string">"click button, lambda"</span>));</span><br><span class="line"></span><br><span class="line">        JFrame frame = <span class="hljs-keyword">new</span> JFrame(<span class="hljs-string">"test"</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        frame.add(testButton, BorderLayout.CENTER);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="hljs-keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的程序我们看到，lambda表达式作为一个参数传进方法中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Lambda表达式是Java SE 8才引进的新特性。对于只申明一个函数的接口，它提供了一个简单和简洁的编写方式。&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
      <category term="JavaSE源码分析" scheme="http://mindasoft.com/categories/JavaSE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>符号++的原理</title>
    <link href="http://mindasoft.com/2018/11/08/javase/%E7%AC%A6%E5%8F%B7++%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://mindasoft.com/2018/11/08/javase/符号++的原理/</id>
    <published>2018-11-08T09:29:37.000Z</published>
    <updated>2018-11-23T08:20:49.452Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用java程序时，会使用带 <strong>i++</strong> 这样一个表达式，那么他的底层原理是什么呢？</p><p>先来看下面这段代码：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerPlusPlusLearning</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer i = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">synchronized</span> (i)&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">200</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> IntegerPlusPlusLearning());</span><br><span class="line">        Thread t2 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> IntegerPlusPlusLearning());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>期待的运行结果：<br><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="hljs-number">200</span></span><br></pre></td></tr></table></figure></p><p><strong>顺序</strong> 输出 i=1到i=200。可惜，这是<label style="color:red">错误的答案。</label></p><p>它的结果可能会出现无序的，或者重复、缺少的情况。</p><h2 id="底层原理分析"><a href="#底层原理分析" class="headerlink" title="底层原理分析"></a>底层原理分析</h2><p>1、 分析编译后的IntegerPlusPlusLearning.class文件，发现 i++ 在虚拟机中的执行原理。</p><p>通过jdk自带的javap命令工具，对IntegerPlusPlusLearning.class 进行分析<br>javap -v IntegerPlusPlusLearning.class</p><p>可以看到输出内容中(如下图)，JVM执行 i++ 的内部逻辑。<br><figure class="highlight dts hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void run();</span><br><span class="line"><span class="hljs-symbol">  descriptor:</span> ()V</span><br><span class="line"><span class="hljs-symbol">  flags:</span> ACC_PUBLIC</span><br><span class="line"><span class="hljs-symbol">  Code:</span></span><br><span class="line">    stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">5</span>, args_size=<span class="hljs-number">1</span></span><br><span class="line">       <span class="hljs-number">0</span>: getstatic     <span class="hljs-meta">#2                  <span class="hljs-comment">// Field i:Ljava/lang/Integer;</span></span></span><br><span class="line">       <span class="hljs-number">3</span>: dup</span><br><span class="line">       <span class="hljs-number">4</span>: astore_1</span><br><span class="line">       <span class="hljs-number">5</span>: monitorenter</span><br><span class="line">       <span class="hljs-number">6</span>: getstatic     <span class="hljs-meta">#2                  <span class="hljs-comment">// Field i:Ljava/lang/Integer;</span></span></span><br><span class="line">       <span class="hljs-number">9</span>: invokevirtual <span class="hljs-meta">#3                  <span class="hljs-comment">// Method java/lang/Integer.intValue:()I</span></span></span><br><span class="line">      <span class="hljs-number">12</span>: sipush        <span class="hljs-number">200</span></span><br><span class="line">      <span class="hljs-number">15</span>: if_icmpge     <span class="hljs-number">52</span></span><br><span class="line">      <span class="hljs-number">18</span>: getstatic     <span class="hljs-meta">#2                  <span class="hljs-comment">// Field i:Ljava/lang/Integer;</span></span></span><br><span class="line">      <span class="hljs-number">21</span>: astore_2</span><br><span class="line">      <span class="hljs-number">22</span>: getstatic     <span class="hljs-meta">#2                  <span class="hljs-comment">// Field i:Ljava/lang/Integer;</span></span></span><br><span class="line">      <span class="hljs-number">25</span>: invokevirtual <span class="hljs-meta">#3                  <span class="hljs-comment">// Method java/lang/Integer.intValue:()I</span></span></span><br><span class="line">      <span class="hljs-number">28</span>: iconst_1</span><br><span class="line">      <span class="hljs-number">29</span>: iadd</span><br><span class="line">      <span class="hljs-number">30</span>: invokestatic  <span class="hljs-meta">#4                  <span class="hljs-comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span></span><br><span class="line">      <span class="hljs-number">33</span>: dup</span><br><span class="line">      <span class="hljs-number">34</span>: putstatic     <span class="hljs-meta">#2                  <span class="hljs-comment">// Field i:Ljava/lang/Integer;</span></span></span><br><span class="line">      <span class="hljs-number">37</span>: astore_3</span><br><span class="line">      <span class="hljs-number">38</span>: aload_2</span><br><span class="line">      <span class="hljs-number">39</span>: pop</span><br></pre></td></tr></table></figure></p><p>22: getstatic —– 获取i的值，Integer类型。<br>25: invokevirtual —– 这里表示调用了，Integer.intValue<br>29: iadd —– 表示i加1<br>30: invokestatic —– 调用Integer.valueOf<br>34: putstatic —– 赋值 </p><p>这个逻辑，通过代码表达出来就是这句“i = Integer.valueOf(i.intValue() + 1)；”</p><p>2、 查看Integer的源码，当变量i的值发生变化后，发现 Integer.valueOf 每次都是新对象。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** Integer源码取自jdk1.8 */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">    <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以最后，代码中 i 变量，是一个Integer对象，当代码中两个线程执行 i++时，<br>实际运行时的 i++ 的实现逻辑是这样的：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = Integer.valueOf(i.intValue() + <span class="hljs-number">1</span>)；</span><br></pre></td></tr></table></figure></p><p>而Integer.valueOf每次是返回一个新的Integer对象，所以，我们的synchronized实际上没有起到你预想中的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在使用java程序时，会使用带 &lt;strong&gt;i++&lt;/strong&gt; 这样一个表达式，那么他的底层原理是什么呢？&lt;/p&gt;
&lt;p&gt;先来看下面这段代码：&lt;br&gt;&lt;figure class=&quot;highlight java hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="JavaSE源码分析" scheme="http://mindasoft.com/categories/JavaSE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码分析" scheme="http://mindasoft.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JavaSE" scheme="http://mindasoft.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://mindasoft.com/2018/11/06/tools/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://mindasoft.com/2018/11/06/tools/markdown语法/</id>
    <published>2018-11-06T05:16:08.000Z</published>
    <updated>2018-11-07T04:35:25.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>1.语法：<br><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="hljs-string">淘宝网</span>](<span class="hljs-link">http://www.taobao.com/</span>)</span><br></pre></td></tr></table></figure></p><p>2.例子：<br><a href="http://www.taobao.com/" target="_blank" rel="noopener">淘宝网</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>1.语法：<br><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="hljs-string">图片标题</span>](<span class="hljs-link">http://mat1.gtimg.com/pingjs/ext2020/qqindex2018/dist/img/qq_logo_2x.png</span>)</span><br></pre></td></tr></table></figure></p><p>2.例子：<br><img src="http://mat1.gtimg.com/pingjs/ext2020/qqindex2018/dist/img/qq_logo_2x.png" alt="图片标题"></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>1.语法：<br><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-section"># 一级标题</span></span><br><span class="line"><span class="hljs-section">## 二级标题</span></span><br><span class="line"><span class="hljs-section">### 三级标题</span></span><br><span class="line"><span class="hljs-section">#### 四级标题</span></span><br><span class="line"><span class="hljs-section">##### 五级标题</span></span><br><span class="line"><span class="hljs-section">###### 六级标题</span></span><br></pre></td></tr></table></figure></p><p>tips：几个 # 就是几级标题，最小到六级</p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-emphasis">*这是斜体*</span></span><br><span class="line"> <span class="hljs-emphasis">*[这是斜体链接](http://www.taobao.com)*</span></span><br><span class="line"> <span class="hljs-emphasis">*斜体,[这是斜体链接](http://www.taobao.com)*</span></span><br><span class="line">tips：斜体和链接可以混用</span><br></pre></td></tr></table></figure><h2 id="为字体加颜色"><a href="#为字体加颜色" class="headerlink" title="为字体加颜色"></a>为字体加颜色</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 这是<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:red"</span>&gt;</span></span>红色<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span>字体</span><br><span class="line"> 这是<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:green"</span>&gt;</span></span>绿色<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span>字体</span><br><span class="line"> 这是<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:yellow"</span>&gt;</span></span>黄色<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span>字体</span><br><span class="line"> 这是<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:blue"</span>&gt;</span></span>蓝色<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span>字体</span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:red"</span>&gt;</span></span>tips:修改color为对应的颜色英文字母即可，复杂的颜色不要想了，况且大家也用不到<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p> 例子：<br>  这是<label style="color:red">红色</label>字体<br>   这是<label style="color:green">绿色</label>字体<br>   这是<label style="color:yellow">黄色</label>字体<br>   这是<label style="color:blue">蓝色</label>字体</p><h2 id="为自体加粗"><a href="#为自体加粗" class="headerlink" title="为自体加粗"></a>为自体加粗</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-strong">**加粗**</span>字体</span><br></pre></td></tr></table></figure><p>例子：</p><p><strong>加粗</strong>字体</p><h2 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Email:<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">yabing.zyb@alibaba-inc.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>例子：</p><p>Email:<a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#121;&#97;&#98;&#105;&#x6e;&#x67;&#x2e;&#x7a;&#x79;&#98;&#x40;&#97;&#x6c;&#x69;&#98;&#97;&#98;&#x61;&#x2d;&#x69;&#110;&#x63;&#x2e;&#99;&#x6f;&#x6d;">&#121;&#97;&#98;&#105;&#x6e;&#x67;&#x2e;&#x7a;&#x79;&#98;&#x40;&#97;&#x6c;&#x69;&#98;&#97;&#98;&#x61;&#x2d;&#x69;&#110;&#x63;&#x2e;&#99;&#x6f;&#x6d;</a></p><h2 id="无序排列"><a href="#无序排列" class="headerlink" title="无序排列"></a>无序排列</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-bullet">* </span>list1</span><br><span class="line"><span class="hljs-bullet">* </span>list2</span><br><span class="line"><span class="hljs-bullet">* </span>list3</span><br></pre></td></tr></table></figure><h2 id="有序排列"><a href="#有序排列" class="headerlink" title="有序排列"></a>有序排列</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-bullet">1. </span>list1</span><br><span class="line"><span class="hljs-bullet">2. </span>list2</span><br><span class="line"><span class="hljs-bullet">3. </span>list3</span><br></pre></td></tr></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-emphasis">***</span></span><br><span class="line">---</span><br><span class="line"><span class="hljs-bullet">- </span>- - -</span><br></pre></td></tr></table></figure><p> tips: 三种都一样</p><h2 id="内容块"><a href="#内容块" class="headerlink" title="内容块"></a>内容块</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-quote">&gt; 这里的内容在内容块中</span></span><br></pre></td></tr></table></figure><p>例子：</p><blockquote><p>这里的内容在内容块中</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-code">```java</span></span><br><span class="line"><span class="hljs-code"> public class Demo&#123;</span></span><br><span class="line"><span class="hljs-code">     public static void main(String[] args)</span></span><br><span class="line"><span class="hljs-code">       </span></span><br><span class="line"><span class="hljs-code">    &#125;</span></span><br><span class="line"><span class="hljs-code"> &#125;</span></span><br><span class="line"><span class="hljs-code">```</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内容框"><a href="#内容框" class="headerlink" title="内容框"></a>内容框</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在上一行内容缩进的基础上再缩进四个空格</span><br></pre></td></tr></table></figure><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要换行<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span>这是换行后的下一行</span><br></pre></td></tr></table></figure><p>例子：需要换行<br>这是换行后的下一行</p><h2 id="中划线"><a href="#中划线" class="headerlink" title="中划线"></a>中划线</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~中划线~~</span><br></pre></td></tr></table></figure><p>例子：<br><del>中划线</del></p><h2 id="添加脚注"><a href="#添加脚注" class="headerlink" title="添加脚注"></a>添加脚注</h2><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是脚注[^1]</span><br><span class="line">[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是脚注说明，会在文章的末尾显示.</span></span><br></pre></td></tr></table></figure><p>这是脚注[^1]<br>[^1]: 这是脚注说明，会在文章的末尾显示.</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>默认表格：<br><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header | Third Header</span><br><span class="line">------------ | ------------- | ------------</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure></p><p>例子：</p><table><thead><tr><th>First Header</th><th>Second Header</th><th>Third Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><p>左右浮动表格：<br><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header | Third Header</span><br><span class="line">:----------- | :-----------: | -----------:</span><br><span class="line">Left         | Center        | Right</span><br><span class="line">Left         | Center        | Right</span><br></pre></td></tr></table></figure></p><p>例子：</p><table><thead><tr><th style="text-align:left">First Header</th><th style="text-align:center">Second Header</th><th style="text-align:right">Third Header</th></tr></thead><tbody><tr><td style="text-align:left">Left</td><td style="text-align:center">Center</td><td style="text-align:right">Right</td></tr><tr><td style="text-align:left">Left</td><td style="text-align:center">Center</td><td style="text-align:right">Right</td></tr></tbody></table><p>tips:默认向左对齐</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;1.语法：&lt;br&gt;&lt;figure class=&quot;highlight markdown hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="markdown" scheme="http://mindasoft.com/tags/markdown/"/>
    
      <category term="md" scheme="http://mindasoft.com/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE源码分析-Integer源码分析</title>
    <link href="http://mindasoft.com/2018/10/24/javase/Integer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://mindasoft.com/2018/10/24/javase/Integer源码分析/</id>
    <published>2018-10-24T14:29:37.000Z</published>
    <updated>2018-11-23T08:20:49.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Integer 类在对象中包装了一个基本类型 int 的值。Integer 类型的对象包含一个 int 类型的字段。</p></blockquote><h1 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Integer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Integer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从类定义中我们可以知道以下几点：</p><ol><li>Integer类不能被继承</li><li>Integer类实现了Comparable接口，所以可以用compareTo进行比较并且Integer对象只能和Integer类型的对象进行比较，不能和其他类型比较（至少调用compareTo方法无法比较）。</li><li>Integer继承了Number类，所以该类可以调用longValue、floatValue、doubleValue等系列方法返回对应的类型的值。</li><li>Numbers实现Serializable接口，所以Integer也支持序列化和反序列化。</li></ol><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>Integer类中定义了以下几个私有属性：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> value;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1360826667806852920L</span>;</span><br></pre></td></tr></table></figure></p><ol><li>value属性就是Integer对象中真正保存int值的。</li><li>serialVersionUID和序列化有关。Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常(InvalidCastException)。</li></ol><h2 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//值为 （－（2的31次方）） 的常量，它表示 int 类型能够表示的最小值。</span></span><br><span class="line"><span class="hljs-meta">@Native</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>   MIN_VALUE = <span class="hljs-number">0x80000000</span>;</span><br><span class="line"><span class="hljs-comment">//值为 （（2的31次方）－1） 的常量，它表示 int 类型能够表示的最大值。</span></span><br><span class="line"><span class="hljs-meta">@Native</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>   MAX_VALUE = <span class="hljs-number">0x7fffffff</span>;   </span><br><span class="line"><span class="hljs-comment">//表示基本类型 int 的 Class 实例。</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class="hljs-string">"int"</span>);</span><br><span class="line"><span class="hljs-comment">//用来以二进制补码形式表示 int 值的比特位数。</span></span><br><span class="line"><span class="hljs-meta">@Native</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SIZE = <span class="hljs-number">32</span>;</span><br><span class="line"><span class="hljs-comment">//用来以二进制补码形式表示 int 值的字节数。1.8以后才有</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> BYTES = SIZE / Byte.SIZE;</span><br></pre></td></tr></table></figure><p>以上属性可直接使用，因为他们已经定义成publis static fianl能用的时候尽量使用他们，这样不仅能使代码有很好的可读性，也能提高性能节省资源。</p><h1 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerLearning</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i = <span class="hljs-number">100</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> i2 = i;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，编译后，我们通过jdk自带的javap命令工具对IntegerLearning.class 进行分析<br>javap -v IntegerLearning.class<br><figure class="highlight lasso hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> static <span class="hljs-literal">void</span> main(java.lang.<span class="hljs-built_in">String</span><span class="hljs-meta">[</span><span class="hljs-meta">]</span>);</span><br><span class="line">    descriptor: (<span class="hljs-meta">[</span>Ljava/lang/<span class="hljs-built_in">String</span>;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="hljs-built_in">stack</span>=<span class="hljs-number">2</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span></span><br><span class="line">         <span class="hljs-number">0</span>: bipush        <span class="hljs-number">100</span></span><br><span class="line">         <span class="hljs-number">2</span>: invokestatic  #2                  <span class="hljs-comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line">         <span class="hljs-number">5</span>: astore_1</span><br><span class="line">         <span class="hljs-number">6</span>: aload_1</span><br><span class="line">         <span class="hljs-number">7</span>: invokevirtual #3                  <span class="hljs-comment">// Method java/lang/Integer.intValue:()I</span></span><br><span class="line">        <span class="hljs-number">10</span>: istore_2</span><br><span class="line">        <span class="hljs-number">11</span>: getstatic     #4                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="hljs-number">14</span>: aload_1</span><br><span class="line">        <span class="hljs-number">15</span>: invokevirtual #5                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line">        <span class="hljs-number">18</span>: <span class="hljs-keyword">return</span></span><br></pre></td></tr></table></figure></p><p>从上面可以看出Integer i = 100; 编译器会转成 Integer i = Integer.valueOf(100);<br>int i2 = i 自动拆箱用的是 Integer.intValue</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// high value may be configured by property</span></span><br><span class="line">        <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="hljs-string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="hljs-number">127</span>);</span><br><span class="line">                <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);</span><br><span class="line">            &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="hljs-keyword">new</span> Integer[(high - low) + <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">int</span> j = low;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="hljs-keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IntegerCache</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer内部有一个内部类IntegerCache，用来缓存缓存以支持-128和127（包括）之间的值的自动装箱的对象标识语义。<br>可以看出，Integer实例化时，IntegerCache中的 Integer cache[] 缓存了 -128 和127（包括）之间的值，下面会介绍如何使用了缓存的内部类。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>Integer提供了两个构造方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//构造一个新分配的 Integer 对象，它表示指定的 int 值。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Integer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Integer</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = parseInt(s, <span class="hljs-number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从构造方法中我们可以知道，初始化一个Integer对象的时候只能创建一个十进制的整数。</p><h2 id="String转Integer"><a href="#String转Integer" class="headerlink" title="String转Integer"></a>String转Integer</h2><h3 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h3><p>在String的构造方法中，使用了parseInt，我们来看下全部的parse方法<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用进制基数radix（2,8,10,16,27,36）解析字符串S</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> radix)</span></span></span><br><span class="line"><span class="hljs-function">                <span class="hljs-keyword">throws</span> NumberFormatException</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NumberFormatException(<span class="hljs-string">"null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (radix &lt; Character.MIN_RADIX) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NumberFormatException(<span class="hljs-string">"radix "</span> + radix +</span><br><span class="line">                                        <span class="hljs-string">" less than Character.MIN_RADIX"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (radix &gt; Character.MAX_RADIX) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NumberFormatException(<span class="hljs-string">"radix "</span> + radix +</span><br><span class="line">                                        <span class="hljs-string">" greater than Character.MAX_RADIX"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> negative = <span class="hljs-keyword">false</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, len = s.length();</span><br><span class="line">    <span class="hljs-keyword">int</span> limit = -Integer.MAX_VALUE;</span><br><span class="line">    <span class="hljs-keyword">int</span> multmin;</span><br><span class="line">    <span class="hljs-keyword">int</span> digit;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (len &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">// 判断字符串开通是否以 + - 开头</span></span><br><span class="line">        <span class="hljs-keyword">char</span> firstChar = s.charAt(<span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (firstChar &lt; <span class="hljs-string">'0'</span>) &#123; <span class="hljs-comment">// Possible leading "+" or "-"</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (firstChar == <span class="hljs-string">'-'</span>) &#123;</span><br><span class="line">                negative = <span class="hljs-keyword">true</span>;</span><br><span class="line">                limit = Integer.MIN_VALUE;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstChar != <span class="hljs-string">'+'</span>)</span><br><span class="line">                <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) <span class="hljs-comment">// Cannot have lone "+" or "-"</span></span><br><span class="line">                <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// 循环遍历字符串每个字符转成相应进制数字</span></span><br><span class="line">        multmin = limit / radix;</span><br><span class="line">        <span class="hljs-keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">            <span class="hljs-comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></span><br><span class="line">            digit = Character.digit(s.charAt(i++),radix);</span><br><span class="line">            <span class="hljs-keyword">if</span> (digit &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (result &lt; multmin) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line">            &#125;</span><br><span class="line">            result *= radix;</span><br><span class="line">            <span class="hljs-keyword">if</span> (result &lt; limit + digit) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line">            &#125;</span><br><span class="line">            result -= digit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> negative ? result : -result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> parseInt(s,<span class="hljs-number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parseUnsignedInt</span><span class="hljs-params">(String s)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parseUnsignedInt</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> radix)</span></span></span><br></pre></td></tr></table></figure></p><p>parseUnsignedInt 解析无符号的字符串，在内部原理调用的是parseInt 或者Long.parseLong。这里就不在说明。</p><h3 id="valueOf方法"><a href="#valueOf方法" class="headerlink" title="valueOf方法"></a>valueOf方法</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> radix)</span> <span class="hljs-keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> Integer.valueOf(parseInt(s,radix));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> Integer.valueOf(parseInt(s, <span class="hljs-number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>valueOf(int i)使用缓存内部类IntegerCache,<strong>如果是-128和127之间的数，不是重新new的类，而直接返回缓存的Integer类。</strong></p><h3 id="getInteger方法"><a href="#getInteger方法" class="headerlink" title="getInteger方法"></a>getInteger方法</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">getInteger</span><span class="hljs-params">(String nm)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> getInteger(nm, <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">getInteger</span><span class="hljs-params">(String nm, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    Integer result = getInteger(nm, <span class="hljs-keyword">null</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> (result == <span class="hljs-keyword">null</span>) ? Integer.valueOf(val) : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">getInteger</span><span class="hljs-params">(String nm, Integer val)</span> </span>&#123;</span><br><span class="line">    String v = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        v = System.getProperty(nm);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException | NullPointerException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (v != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> Integer.decode(v);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出getInteger 实际上调用的是Integer.decode方法。那我们来看看decode<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 通过字符串前面几位字符得出 是否为 十进制，十六进制和八进制数，而以其规则解析成Integer类</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">decode</span><span class="hljs-params">(String nm)</span> <span class="hljs-keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> radix = <span class="hljs-number">10</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> negative = <span class="hljs-keyword">false</span>;</span><br><span class="line">    Integer result;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (nm.length() == <span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NumberFormatException(<span class="hljs-string">"Zero length string"</span>);</span><br><span class="line">    <span class="hljs-keyword">char</span> firstChar = nm.charAt(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-comment">// Handle sign, if present</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (firstChar == <span class="hljs-string">'-'</span>) &#123;</span><br><span class="line">        negative = <span class="hljs-keyword">true</span>;</span><br><span class="line">        index++;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstChar == <span class="hljs-string">'+'</span>)</span><br><span class="line">        index++;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Handle radix specifier, if present</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (nm.startsWith(<span class="hljs-string">"0x"</span>, index) || nm.startsWith(<span class="hljs-string">"0X"</span>, index)) &#123;</span><br><span class="line">        index += <span class="hljs-number">2</span>;</span><br><span class="line">        radix = <span class="hljs-number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nm.startsWith(<span class="hljs-string">"#"</span>, index)) &#123;</span><br><span class="line">        index ++;</span><br><span class="line">        radix = <span class="hljs-number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nm.startsWith(<span class="hljs-string">"0"</span>, index) &amp;&amp; nm.length() &gt; <span class="hljs-number">1</span> + index) &#123;</span><br><span class="line">        index ++;</span><br><span class="line">        radix = <span class="hljs-number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (nm.startsWith(<span class="hljs-string">"-"</span>, index) || nm.startsWith(<span class="hljs-string">"+"</span>, index))</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NumberFormatException(<span class="hljs-string">"Sign character in wrong position"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        result = Integer.valueOf(nm.substring(index), radix);</span><br><span class="line">        result = negative ? Integer.valueOf(-result.intValue()) : result;</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        <span class="hljs-comment">// If number is Integer.MIN_VALUE, we'll end up here. The next line</span></span><br><span class="line">        <span class="hljs-comment">// handles this case, and causes any genuine format error to be</span></span><br><span class="line">        <span class="hljs-comment">// rethrown.</span></span><br><span class="line">        String constant = negative ? (<span class="hljs-string">"-"</span> + nm.substring(index))</span><br><span class="line">                                   : nm.substring(index);</span><br><span class="line">        result = Integer.valueOf(constant, radix);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们又发现decode 底层调用的是Integer.valueOf。从而得出：</p><p>所有将String转成Integer的方法都是基于parseInt方法实现的。简单看一下以上部分方法的调用栈。<br><figure class="highlight clean hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getInteger(...) ---&gt; ---&gt;Integer.decode(...)---&gt;Integer.valueOf(...)---&gt;parseInt(...)</span><br><span class="line">```           </span><br><span class="line"></span><br><span class="line">## Integer转String</span><br><span class="line"></span><br><span class="line">### toString</span><br></pre></td></tr></table></figure></p><p>public String toString() {<br>    return toString(value);<br>}</p><p>public static String toString(int i) {<br>    if (i == Integer.MIN_VALUE)<br>        return “-2147483648”;<br>    int size = (i &lt; 0) ? stringSize(-i) + 1 : stringSize(i);<br>    char[] buf = new char[size];<br>    getChars(i, size, buf);<br>    return new String(buf, true);<br>}<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>public static String toString(int i, int radix)<br>public static String toBinaryString(int i)<br>public static String toHexString(int i)<br>public static String toOctalString(int i)<br>public static String toUnsignedString(int i)<br>public static String toUnsignedString(int i, int radix)<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Integer 类在对象中包装了一个基本类型 int 的值。Integer 类型的对象包含一个 int 类型的字段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;类定义&quot;&gt;&lt;a href=&quot;#类定义&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="JavaSE源码分析" scheme="http://mindasoft.com/categories/JavaSE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码分析" scheme="http://mindasoft.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JavaSE" scheme="http://mindasoft.com/tags/JavaSE/"/>
    
      <category term="Integer" scheme="http://mindasoft.com/tags/Integer/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE源码分析-String源码分析</title>
    <link href="http://mindasoft.com/2018/10/23/javase/String%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://mindasoft.com/2018/10/23/javase/String源码分析/</id>
    <published>2018-10-23T10:26:00.000Z</published>
    <updated>2018-11-23T08:20:49.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Integer 类在对象中包装了一个基本类型 int 的值。Integer 类型的对象包含一个 int 类型的字段。</p></blockquote><h1 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>从该类的声明中我们可以看出String是final类型的，表示该类不能被继承，同时该类实现了三个接口：java.io.Serializable、 Comparable<string>、 CharSequence</string></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>Integer类中定义了以下几个私有属性：<br><figure class="highlight aspectj hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hash;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">-6849794470754667710</span>L;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ObjectStreamField[] serialPersistentFields = <span class="hljs-keyword">new</span> ObjectStreamField[<span class="hljs-number">0</span>];</span><br></pre></td></tr></table></figure></p><ol><li>value[]这是一个字符数组，并且是final类型，他用于存储字符串内容，从fianl这个关键字中我们可以看出，String的内容一旦被初始化了是不能被更改的。 虽然有这样的例子： String s = “a”; s = “b” 但是，这并不是对s的修改，而是重新指向了新的字符串， 从这里我们也能知道，String其实就是用char[]实现的。</li><li>hash缓存字符串的hash Code，默认值为 0</li><li>因为String实现了Serializable接口，所以支持序列化和反序列化支持。Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常(InvalidCastException)。</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringLearning</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="hljs-string">"abc"</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"edf"</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，编译后，我们通过jdk自带的javap命令工具对StringLearning.class 进行分析<br>javap -v StringLearning.class<br><figure class="highlight lasso hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> static <span class="hljs-literal">void</span> main(java.lang.<span class="hljs-built_in">String</span><span class="hljs-meta">[</span><span class="hljs-meta">]</span>);</span><br><span class="line">  descriptor: (<span class="hljs-meta">[</span>Ljava/lang/<span class="hljs-built_in">String</span>;)V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    <span class="hljs-built_in">stack</span>=<span class="hljs-number">3</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span></span><br><span class="line">       <span class="hljs-number">0</span>: ldc           #2                  <span class="hljs-comment">// String abc</span></span><br><span class="line">       <span class="hljs-number">2</span>: astore_1</span><br><span class="line">       <span class="hljs-number">3</span>: getstatic     #3                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="hljs-number">6</span>: aload_1</span><br><span class="line">       <span class="hljs-number">7</span>: invokevirtual #4                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="hljs-number">10</span>: <span class="hljs-literal">new</span>           #5                  <span class="hljs-comment">// class java/lang/String</span></span><br><span class="line">      <span class="hljs-number">13</span>: dup</span><br><span class="line">      <span class="hljs-number">14</span>: ldc           #6                  <span class="hljs-comment">// String edf</span></span><br><span class="line">      <span class="hljs-number">16</span>: invokespecial #7                  <span class="hljs-comment">// Method java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="hljs-number">19</span>: astore_2</span><br><span class="line">      <span class="hljs-number">20</span>: getstatic     #3                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="hljs-number">23</span>: aload_2</span><br><span class="line">      <span class="hljs-number">24</span>: invokevirtual #4                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="hljs-number">27</span>: <span class="hljs-keyword">return</span></span><br></pre></td></tr></table></figure></p><p>ldc表示将一个常量加载到操作数栈。 #2 从常量池中取出”abc”的引用，加载到操作数栈中 。在编译启动过程中,字符串字面量就会被存入常量池<br>astore_1 保存一个变量，就是s1<br>16: invokespecial #7  是调用String的构造方法。</p><p>由以上可以知道，String s1 = “abc”中s1只是引用了常量池的值。String s2 = new String(“edf”);的s2是指向了一个String对象。<br>那么：<br><figure class="highlight arduino hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">String</span> s1 = <span class="hljs-string">"abc"</span>;</span><br><span class="line"><span class="hljs-keyword">String</span> s2 = <span class="hljs-string">"abc"</span>;</span><br><span class="line"><span class="hljs-keyword">String</span> s3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">"abc"</span>);</span><br><span class="line"><span class="hljs-keyword">String</span> s4 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">"abc"</span>);</span><br></pre></td></tr></table></figure></p><p>s1 == s2        答案：true<br>s1 == s3        答案：false<br>s3 == s4        答案：false<br>s1.equals(s2)   答案：true<br>s1.equals(s3)   答案：true<br>s3.equals(s4)   答案：true</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>String类作为一个java.lang包中比较常用的类,自然有很多重载的构造方法.在这里介绍几种典型的构造方法:<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="hljs-keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们知道，其实String就是使用字符数组（char[]）实现的。所以我们可以使用一个字符数组来创建一个String，那么这里值得注意的是，当我们使用字符数组创建String的时候，会用到Arrays.copyOf方法和Arrays.copyOfRange方法。这两个方法是将原有的字符数组中的内容逐一的复制到String中的字符数组中。同样，我们也可以用一个String类型的对象来初始化一个String。这里将直接将源String中的value和hash两个属性直接赋值给目标String。因为String一旦定义之后是不可以改变的，所以也就不用担心改变源String的值会影响到目标String的值。</p><p>当然，在使用字符数组来创建一个新的String对象的时候，不仅可以使用整个字符数组，也可以使用字符数组的一部分，只要多传入两个参数int offset和int count就可以了。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Java中，String实例中保存有一个char[]字符数组，char[]字符数组是以unicode码来存储的，String 和 char 为内存形式，byte是网络传输或存储的序列化形式。所以在很多传输和存储的过程中需要将byte[]数组和String进行相互转化。所以，String提供了一系列重载的构造方法来将一个字符数组转化成String，提到byte[]和String之间的相互转换就不得不关注编码问题。String(byte[] bytes, Charset charset)是指通过charset来解码指定的byte数组，将其解码成unicode的char[]数组，够造成新的String。</p><p>这里的bytes字节流是使用charset进行编码的，想要将他转换成unicode的char[]数组，而又保证不出现乱码，那就要指定其解码方式</p><p>同样使用字节数组来构造String也有很多种形式，按照是否指定解码方式分的话可以分为两种：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String(<span class="hljs-keyword">byte</span> bytes[]) String(<span class="hljs-keyword">byte</span> bytes[], <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> length)</span><br><span class="line">String(<span class="hljs-keyword">byte</span> bytes[], Charset charset)</span><br><span class="line">String(<span class="hljs-keyword">byte</span> bytes[], String charsetName)</span><br><span class="line">String(<span class="hljs-keyword">byte</span> bytes[], <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> length, Charset charset)</span><br><span class="line">String(<span class="hljs-keyword">byte</span> bytes[], <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> length, String charsetName)</span><br></pre></td></tr></table></figure></p><p>如果我们在使用byte[]构造String的时候，使用的是下面这四种构造方法(带有charsetName或者charset参数)的一种的话，那么就会使用StringCoding.decode方法进行解码，使用的解码的字符集就是我们指定的charsetName或者charset。 我们在使用byte[]构造String的时候，如果没有指明解码使用的字符集的话，那么StringCoding的decode方法首先调用系统的默认编码格式，如果没有指定编码格式则默认使用ISO-8859-1编码格式进行编码操作。主要体现代码如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span>[] decode(<span class="hljs-keyword">byte</span>[] ba, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len) &#123;</span><br><span class="line">    String csn = Charset.defaultCharset().name();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// use charset name decode() variant which provides caching.</span></span><br><span class="line">        <span class="hljs-keyword">return</span> decode(csn, ba, off, len);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException x) &#123;</span><br><span class="line">        warnUnsupportedCharset(csn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> decode(<span class="hljs-string">"ISO-8859-1"</span>, ba, off, len);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException x) &#123;</span><br><span class="line">        <span class="hljs-comment">// If this code is hit during VM initialization, MessageUtils is</span></span><br><span class="line">        <span class="hljs-comment">// the only way we will be able to get any kind of error message.</span></span><br><span class="line">        MessageUtils.err(<span class="hljs-string">"ISO-8859-1 charset not available: "</span></span><br><span class="line">                         + x.toString());</span><br><span class="line">        <span class="hljs-comment">// If we can not find ISO-8859-1 (a required encoding) then things</span></span><br><span class="line">        <span class="hljs-comment">// are seriously wrong with the installation.</span></span><br><span class="line">        System.exit(<span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用StringBuffer和StringBuider构造一个String<br>作为String的两个“兄弟”，StringBuffer和StringBuider也可以被当做构造String的参数。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然，这两个构造方法是很少用到的，至少我从来没有使用过，因为当我们有了StringBuffer或者StringBuilfer对象之后可以直接使用他们的toString方法来得到String。关于效率问题，Java的官方文档有提到说使用StringBuilder的toString方法会更快一些，原因是StringBuffer的toString方法是synchronized的，在牺牲了效率的情况下保证了线程安全。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Create a copy, don't share the array</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(value, <span class="hljs-number">0</span>, count);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br></pre></td></tr></table></figure></p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Integer 类在对象中包装了一个基本类型 int 的值。Integer 类型的对象包含一个 int 类型的字段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;类定义&quot;&gt;&lt;a href=&quot;#类定义&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="JavaSE源码分析" scheme="http://mindasoft.com/categories/JavaSE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码分析" scheme="http://mindasoft.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JavaSE" scheme="http://mindasoft.com/tags/JavaSE/"/>
    
      <category term="String" scheme="http://mindasoft.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看物理CPU个数、核数、逻辑CPU个数</title>
    <link href="http://mindasoft.com/2018/02/07/Linux/Linux%E6%9F%A5%E7%9C%8B%E7%89%A9%E7%90%86CPU%E4%B8%AA%E6%95%B0%E3%80%81%E6%A0%B8%E6%95%B0%E3%80%81%E9%80%BB%E8%BE%91CPU%E4%B8%AA%E6%95%B0/"/>
    <id>http://mindasoft.com/2018/02/07/Linux/Linux查看物理CPU个数、核数、逻辑CPU个数/</id>
    <published>2018-02-07T09:28:52.000Z</published>
    <updated>2018-11-01T11:02:50.207Z</updated>
    
    <content type="html"><![CDATA[<p>CPU总核数 = 物理CPU个数 <em> 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 </em> 每颗物理CPU的核数 * 超线程数</p><p>查看CPU信息（型号）<br><figure class="highlight tcl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@AAA ~]# cat /<span class="hljs-keyword">proc</span>/cpuinfo |<span class="hljs-title"> grep</span> name |<span class="hljs-title"> cut</span> -f2 -d: |<span class="hljs-title"> uniq</span> -c</span><br><span class="line">     24<span class="hljs-title">         Intel(R)</span> Xeon(R)<span class="hljs-title"> CPU</span> E5-2630 0 @ 2.30GHz</span><br><span class="line"></span><br><span class="line"># 查看物理CPU个数</span><br><span class="line">[root@AAA ~]#<span class="hljs-title"> cat</span> /<span class="hljs-keyword">proc</span>/cpuinfo|<span class="hljs-title"> grep</span> "physical<span class="hljs-title"> id"|</span> sort|<span class="hljs-title"> uniq|</span> wc -l</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"># 查看每个物理CPU中core的个数(即核数)</span><br><span class="line">[root@AAA ~]#<span class="hljs-title"> cat</span> /<span class="hljs-keyword">proc</span>/cpuinfo|<span class="hljs-title"> grep</span> "cpu<span class="hljs-title"> cores"|</span> uniq</span><br><span class="line">cpu<span class="hljs-title"> cores</span>    : 6</span><br><span class="line"></span><br><span class="line"># 查看逻辑CPU的个数</span><br><span class="line">[root@AAA ~]#<span class="hljs-title"> cat</span> /<span class="hljs-keyword">proc</span>/cpuinfo|<span class="hljs-title"> grep</span> "processor"|<span class="hljs-title"> wc</span> -l</span><br><span class="line">24</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CPU总核数 = 物理CPU个数 &lt;em&gt; 每颗物理CPU的核数&lt;br&gt;总逻辑CPU数 = 物理CPU个数 &lt;/em&gt; 每颗物理CPU的核数 * 超线程数&lt;/p&gt;
&lt;p&gt;查看CPU信息（型号）&lt;br&gt;&lt;figure class=&quot;highlight tcl hljs&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Server" scheme="http://mindasoft.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>SSL-https配置</title>
    <link href="http://mindasoft.com/2018/01/08/server/SSL-https%E9%85%8D%E7%BD%AE/"/>
    <id>http://mindasoft.com/2018/01/08/server/SSL-https配置/</id>
    <published>2018-01-08T11:48:52.000Z</published>
    <updated>2018-11-23T01:48:58.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主流证书格式介绍"><a href="#主流证书格式介绍" class="headerlink" title="主流证书格式介绍"></a>主流证书格式介绍</h1><p>一般来说，主流的Web服务软件，通常都基于两种基础密码库：OpenSSL和Java。</p><p>Tomcat、Weblogic、JBoss等，使用Java提供的密码库。通过Java的Keytool工具，生成Java Keystore（JKS）格式的证书文件。</p><p>Apache、Nginx等，使用OpenSSL提供的密码库，生成PEM、KEY、CRT等格式的证书文件。</p><p>BM的产品，如Websphere、IBM Http Server（IHS）等，使用IBM产品自带的iKeyman工具，生成KDB格式的证书文件。</p><p>微软Windows Server中的Internet Information Services（IIS），使用Windows自带的证书库生成PFX格式的证书文件。</p><p>如果您在工作中遇到带有后缀扩展名的证书文件，可以简单用如下方法区分：</p><p><em>.DER </em>.CER : 这样的证书文件是二进制格式，只含有证书信息，不包含私钥。</p><p><em>.CRT : 这样的文件可以是二进制格式，也可以是文本格式，一般均为文本格式，功能与</em>.DER/*.CER相同。</p><p><em>.PEM : 一般是文本格式，可以放证书或私钥，或者两者都包含。 </em>.PEM如果只包含私钥，那一般用 *.KEY代替。</p><p><em>.PFX </em>.P12 是二进制格式，同时含证书和私钥，一般有密码保护。</p><p>怎么判断是文本格式还是二进制？</p><p>用记事本打开，如果是规则的数字字母，如<br>—–BEGIN CERTIFICATE—–<br>MIIE5zCCA8+gAwIBAgIQN+whYc2BgzAogau0dc3PtzANBgkqh……<br>—–END CERTIFICATE—–<br>就是文本的，上面的BEGIN CERTIFICATE，说明这是一个证书<br>如果是—–BEGIN RSA PRIVATE KEY—–，说明这是一个私钥</p><p>这些证书格式之间是可以互相转换的<br><img src="/images/zhengshu.jpg" alt="证书转换"><br>以下提供了一些证书之间的转换方法：</p><ol><li>将JKS转换成PFX</li></ol><p>可以使用Keytool工具，将JKS格式转换为PFX格式。</p><p>keytool -importkeystore -srckeystore D:\server.jks -destkeystore D:\server.pfx -srcstoretype JKS -deststoretype PKCS12</p><ol><li>将PFX转换为JKS</li></ol><p>可以使用Keytool工具，将PFX格式转换为JKS格式。</p><p>keytool -importkeystore -srckeystore D:\server.pfx -destkeystore D:\server.jks -srcstoretype PKCS12 -deststoretype JKS</p><ol><li>将PEM/KEY/CRT转换为PFX</li></ol><p>使用OpenSSL工具，可以将密钥文件KEY和公钥文件CRT转化为PFX文件。</p><p>将密钥文件KEY和公钥文件CRT放到OpenSSL目录下，打开OpenSSL执行以下命令：</p><p>openssl pkcs12 -export -out server.pfx -inkey server.key -in server.crt</p><ol><li>将PFX转换为PEM/KEY/CRT</li></ol><p>使用OpenSSL工具，可以将PFX文件转化为密钥文件KEY和公钥文件CRT。</p><p>将PFX文件放到OpenSSL目录下，打开OpenSSL执行以下命令：</p><p>openssl pkcs12 -in server.pfx -nodes -out server.pem</p><p>openssl rsa -in server.pem -out server.key</p><p>openssl x509 -in server.pem -out server.crt</p><p><strong> 请注意 </strong> 此步骤是专用于使用keytool生成私钥和CSR申请证书，并且获取到pem格式证书公钥的情况下做分离私钥使用的，所以在实际部署证书时请使用此步骤分离出来的私钥和申请下来的公钥证书做匹配使用。</p><p>云盾证书服务统一使用 PEM 格式的数字证书文件。</p><h1 id="pem证书转为jks证书"><a href="#pem证书转为jks证书" class="headerlink" title="pem证书转为jks证书"></a>pem证书转为jks证书</h1><p>第一步：pem(需要私钥) 转为 .pfx<br><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -out server<span class="hljs-selector-class">.pfx</span> -inkey private<span class="hljs-selector-class">.key</span> -<span class="hljs-keyword">in</span> server.pem</span><br></pre></td></tr></table></figure></p><p>第二步：.pfx 转为 .jks<br><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore server<span class="hljs-selector-class">.pfx</span> -destkeystore server<span class="hljs-selector-class">.jks</span> -srcstoretype PKCS12 -deststoretype JKS</span><br></pre></td></tr></table></figure></p><h1 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h1><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="hljs-attribute">protocol</span>=<span class="hljs-string">"org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line">                  <span class="hljs-attribute">port</span>=<span class="hljs-string">"443"</span> <span class="hljs-attribute">SSLEnabled</span>=<span class="hljs-string">"true"</span></span><br><span class="line">                   <span class="hljs-attribute">maxThreads</span>=<span class="hljs-string">"150"</span> <span class="hljs-attribute">scheme</span>=<span class="hljs-string">"https"</span> <span class="hljs-attribute">secure</span>=<span class="hljs-string">"true"</span></span><br><span class="line">               <span class="hljs-attribute">keystoreFile</span>=<span class="hljs-string">"/home/websoft/key/server.jks"</span> <span class="hljs-attribute">keystorePass</span>=<span class="hljs-string">"123456"</span></span><br><span class="line">               <span class="hljs-attribute">clientAuth</span>=<span class="hljs-string">"false"</span> <span class="hljs-attribute">sslProtocol</span>=<span class="hljs-string">"TLS"</span></span><br><span class="line"> <span class="hljs-attribute">ciphers</span>=<span class="hljs-string">"TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,</span></span><br><span class="line"><span class="hljs-string">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256"</span>  /&gt;</span><br></pre></td></tr></table></figure><h1 id="ngnix配置"><a href="#ngnix配置" class="headerlink" title="ngnix配置"></a>ngnix配置</h1><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-section">server</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">listen</span>    <span class="hljs-number">80</span>;</span><br><span class="line">  <span class="hljs-attribute">listen</span>    <span class="hljs-number">443</span> ssl;</span><br><span class="line">  <span class="hljs-comment"># ssl on; #在同一个server&#123;&#125;里配置同时开启http和https时，不需要开启此项！</span></span><br><span class="line">  <span class="hljs-attribute">server_name</span> dev.cmop.mgtv.com;</span><br><span class="line">  <span class="hljs-attribute">root</span>     /home/websoft/nginx/html;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-attribute">ssl_certificate</span> <span class="hljs-string">"/home/websoft/key/dev/full_chain.pem"</span>;</span><br><span class="line">  <span class="hljs-attribute">ssl_certificate_key</span> <span class="hljs-string">"/home/websoft/key/dev/private.key"</span>;</span><br><span class="line">  <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">5m</span>;</span><br><span class="line">  <span class="hljs-attribute">ssl_protocols</span>  SSLv2 SSLv3 TLSv1;<span class="hljs-comment">#指定密码为openssl支持的格式</span></span><br><span class="line">  <span class="hljs-attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;<span class="hljs-comment">#密码加密方式</span></span><br><span class="line">  <span class="hljs-attribute">ssl_prefer_server_ciphers</span>   <span class="hljs-literal">on</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="hljs-attribute">location</span> / &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> /<span class="hljs-number">404</span>.html;</span><br><span class="line">    <span class="hljs-attribute">location</span> = /40x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;</span><br><span class="line">    <span class="hljs-attribute">location</span> = /50x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">server</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">listen</span>    <span class="hljs-number">80</span>;</span><br><span class="line">  <span class="hljs-attribute">listen</span>    <span class="hljs-number">443</span> ssl;</span><br><span class="line">  <span class="hljs-comment"># ssl on;  #在同一个server&#123;&#125;里配置同时开启http和https时，不需要开启此项！</span></span><br><span class="line">  <span class="hljs-attribute">server_name</span> book.cmop.mgtv.com;</span><br><span class="line">  <span class="hljs-attribute">root</span>     /home/websoft/nginx/html;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-attribute">ssl_certificate</span> <span class="hljs-string">"/home/websoft/key/book/full_chain.pem"</span>;</span><br><span class="line">  <span class="hljs-attribute">ssl_certificate_key</span> <span class="hljs-string">"/home/websoft/key/book/private.key"</span>;</span><br><span class="line">  <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">5m</span>;</span><br><span class="line">  <span class="hljs-attribute">ssl_protocols</span>  SSLv2 SSLv3 TLSv1;<span class="hljs-comment">#指定密码为openssl支持的格式</span></span><br><span class="line">  <span class="hljs-attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;<span class="hljs-comment">#密码加密方式</span></span><br><span class="line">  <span class="hljs-attribute">ssl_prefer_server_ciphers</span>   <span class="hljs-literal">on</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="hljs-attribute">location</span> / &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> /<span class="hljs-number">404</span>.html;</span><br><span class="line">    <span class="hljs-attribute">location</span> = /40x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;</span><br><span class="line">    <span class="hljs-attribute">location</span> = /50x.html &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">server</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">listen</span>      <span class="hljs-number">80</span>;</span><br><span class="line">    <span class="hljs-attribute">listen</span>      <span class="hljs-number">443</span> ssl;</span><br><span class="line">    <span class="hljs-attribute">server_name</span>  mango.m.lrts.me;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-attribute">ssl_certificate</span> <span class="hljs-string">"/data/nginx/key/mango.m.lrts.me_bundle.crt"</span>;</span><br><span class="line">    <span class="hljs-attribute">ssl_certificate_key</span> <span class="hljs-string">"/data/nginx/key/mango.m.lrts.me.key"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;</span><br><span class="line">    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>; <span class="hljs-comment">#启用TLS1.1、TLS1.2要求OpenSSL1.0.1及以上版本，若您的OpenSSL版本低于要求，请使用 ssl_protocols TLSv1;</span></span><br><span class="line">    <span class="hljs-attribute">ssl_ciphers</span> HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM;</span><br><span class="line">    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;</span><br><span class="line">    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">1m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-attribute">location</span> / &#123;</span><br><span class="line">       <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</span><br><span class="line">       <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;</span><br><span class="line">       <span class="hljs-attribute">index</span> index.html;</span><br><span class="line">       <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:3000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主流证书格式介绍&quot;&gt;&lt;a href=&quot;#主流证书格式介绍&quot; class=&quot;headerlink&quot; title=&quot;主流证书格式介绍&quot;&gt;&lt;/a&gt;主流证书格式介绍&lt;/h1&gt;&lt;p&gt;一般来说，主流的Web服务软件，通常都基于两种基础密码库：OpenSSL和Java。&lt;/p&gt;
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="ssl" scheme="http://mindasoft.com/tags/ssl/"/>
    
      <category term="https" scheme="http://mindasoft.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Linux时间和时区</title>
    <link href="http://mindasoft.com/2018/01/03/Linux/Linux%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%B6%E5%8C%BA/"/>
    <id>http://mindasoft.com/2018/01/03/Linux/Linux时间和时区/</id>
    <published>2018-01-03T07:46:00.000Z</published>
    <updated>2018-11-01T11:19:23.590Z</updated>
    
    <content type="html"><![CDATA[<p>如果你的 Linux 系统时区配置不正确，必需要手动调整到正确的当地时区。<br>NTP 对时间的同步处理只计算当地时间与 UTC 时间的偏移量，因此配置一个 NTP 对时间进行同步并不能解决时区不正确的问题。<br>所以大家在用了国外云计算服务商如 Microsoft Azure 或其它 VPS、虚拟机时，需要注意是否与中国大陆的时区一致。</p><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><figure class="highlight vala hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta"># 查询时间</span></span><br><span class="line">date</span><br><span class="line"><span class="hljs-meta"># 修改时间</span></span><br><span class="line">date -s <span class="hljs-string">"2018-01-03 15:36:25"</span></span><br><span class="line"><span class="hljs-meta"># 查看时区时间</span></span><br><span class="line">ls -l /etc/localtime</span><br></pre></td></tr></table></figure><h1 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h1><p>/etc/localtime是用来描述本机时间，而 /etc/timezone是用来描述本机所属的时区.<br><figure class="highlight vala hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta"># 修改时区</span></span><br><span class="line">tzselect</span><br><span class="line"><span class="hljs-meta"># 查看时区</span></span><br><span class="line">timedatectl</span><br></pre></td></tr></table></figure></p><p>Linux 用户一个多用户系统，每个用户都可以配置自己所需的时区，你可以为自己新增一个 TZ 环境变量：<br><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">TZ</span>=<span class="hljs-string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure></p><p>执行完成之后需要重新登录系统或刷新 ~/.bashrc 生效。<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>更改Linux系统时区<br>要更改 Linux 系统整个系统范围的时区可以使用如下命令：<br><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -f <span class="hljs-regexp">/etc/</span>localtime</span><br><span class="line">sudo ln -s <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc<span class="hljs-regexp">/localtime</span></span><br></pre></td></tr></table></figure></p><p>注意：/usr/share/zoneinfo/Asia/Shanghai 中的具体时区请用自己获取到的 TZ 值进行替换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你的 Linux 系统时区配置不正确，必需要手动调整到正确的当地时区。&lt;br&gt;NTP 对时间的同步处理只计算当地时间与 UTC 时间的偏移量，因此配置一个 NTP 对时间进行同步并不能解决时区不正确的问题。&lt;br&gt;所以大家在用了国外云计算服务商如 Microsoft A
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Linux" scheme="http://mindasoft.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos7.3防火墙配置</title>
    <link href="http://mindasoft.com/2018/01/02/Linux/Centos7.3%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/"/>
    <id>http://mindasoft.com/2018/01/02/Linux/Centos7.3防火墙配置/</id>
    <published>2018-01-02T02:02:00.000Z</published>
    <updated>2018-11-20T02:37:30.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="firewall防火墙"><a href="#firewall防火墙" class="headerlink" title="firewall防火墙"></a>firewall防火墙</h1><p>1、查看firewall服务状态<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">查看状态： systemctl status firewalld </span><br><span class="line">启动： systemctl <span class="hljs-keyword">start</span> firewalld</span><br><span class="line">停止： systemctl <span class="hljs-keyword">stop</span> firewalld</span><br><span class="line">禁用： systemctl <span class="hljs-keyword">enable</span> firewalld</span><br><span class="line">启用： systemctl <span class="hljs-keyword">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">启动一个服务：systemctl <span class="hljs-keyword">start</span> firewalld.service</span><br><span class="line">关闭一个服务：systemctl <span class="hljs-keyword">stop</span> firewalld.service</span><br><span class="line">重启一个服务：systemctl restart firewalld.service</span><br><span class="line">显示一个服务的状态：systemctl <span class="hljs-keyword">status</span> firewalld.service</span><br><span class="line">在开机时启用一个服务：systemctl <span class="hljs-keyword">enable</span> firewalld.service</span><br><span class="line">在开机时禁用一个服务：systemctl <span class="hljs-keyword">disable</span> firewalld.service</span><br><span class="line">查看服务是否开机启动：systemctl <span class="hljs-keyword">is</span>-enabled firewalld.service</span><br><span class="line">查看已启动的服务列表：systemctl <span class="hljs-keyword">list</span>-unit-files|grep enabled</span><br><span class="line">查看启动失败的服务列表：systemctl <span class="hljs-comment">--failed</span></span><br></pre></td></tr></table></figure></p><p>2、查看firewall的状态<br><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="hljs-keyword">cmd</span><span class="hljs-bash"> --state</span></span><br></pre></td></tr></table></figure></p><p>3、开启、重启、关闭、firewalld.service服务<br><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="hljs-comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="hljs-comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br></pre></td></tr></table></figure></p><p>4、查看防火墙规则<br><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="hljs-keyword">cmd</span><span class="hljs-bash"> --list-all  -zone=public</span></span><br><span class="line"><span class="hljs-bash"></span></span><br><span class="line"><span class="hljs-bash">查看版本： firewall-cmd --version</span></span><br><span class="line"><span class="hljs-bash">查看帮助： firewall-cmd --<span class="hljs-built_in">help</span></span></span><br><span class="line"><span class="hljs-bash">显示状态： firewall-cmd --state</span></span><br><span class="line"><span class="hljs-bash">查看所有打开的端口： firewall-cmd --zone=public --list-ports</span></span><br><span class="line"><span class="hljs-bash">更新防火墙规则： firewall-cmd --reload</span></span><br><span class="line"><span class="hljs-bash">查看区域信息:  firewall-cmd --get-active-zones</span></span><br><span class="line"><span class="hljs-bash">查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0</span></span><br><span class="line"><span class="hljs-bash">拒绝所有包：firewall-cmd --panic-on</span></span><br><span class="line"><span class="hljs-bash">取消拒绝状态： firewall-cmd --panic-off</span></span><br><span class="line"><span class="hljs-bash">查看是否拒绝： firewall-cmd --query-panic</span></span><br></pre></td></tr></table></figure></p><p>5、查询、开放、关闭端口</p><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查询端口是否开放</span></span><br><span class="line">firewall-cmd <span class="hljs-attribute">--query-port</span>=8080/tcp </span><br><span class="line"><span class="hljs-comment"># 开放80端口</span></span><br><span class="line">firewall-cmd --permanent <span class="hljs-attribute">--add-port</span>=8080/tcp <span class="hljs-attribute">--zone</span>=public</span><br><span class="line"><span class="hljs-comment"># 移除端口</span></span><br><span class="line">firewall-cmd --permanent <span class="hljs-attribute">--remove-port</span>=8080/tcp <span class="hljs-attribute">--zone</span>=public</span><br><span class="line"><span class="hljs-comment">#重启防火墙(修改配置后要重启防火墙)</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>参数解释<br>1、firwall-cmd：是Linux提供的操作firewall的一个工具；<br>2、–permanent：表示设置为持久；<br>3、–add-port：标识添加的端口；</p><h1 id="iptables防火墙"><a href="#iptables防火墙" class="headerlink" title="iptables防火墙"></a>iptables防火墙</h1><p>1、安装<br><figure class="highlight smali hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install iptables-services</span><br><span class="line">sudo<span class="hljs-keyword"> system</span>ctl enable iptables &amp;&amp; sudo<span class="hljs-keyword"> system</span>ctl enable ip6tables</span><br><span class="line">sudo<span class="hljs-keyword"> system</span>ctl start iptables &amp;&amp; sudo<span class="hljs-keyword"> system</span>ctl start ip6tables</span><br></pre></td></tr></table></figure></p><p>2、启用、禁用<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-comment">#最后重启防火墙使配置生效</span></span><br><span class="line">systemctl restart iptables.service</span><br><span class="line"><span class="hljs-comment"># 设置防火墙开机启动</span></span><br><span class="line">systemctl <span class="hljs-built_in">enable</span> iptables.service</span><br></pre></td></tr></table></figure></p><p>3、编辑配置文件<br><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/iptables</span></span><br></pre></td></tr></table></figure></p><figure class="highlight oxygene hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># sampleconfiguration <span class="hljs-keyword">for</span> iptables service</span><br><span class="line"># you can edit thismanually <span class="hljs-keyword">or</span> use system-config-firewall</span><br><span class="line"># please <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> askus <span class="hljs-keyword">to</span> <span class="hljs-keyword">add</span> additional ports/services <span class="hljs-keyword">to</span> this <span class="hljs-keyword">default</span> configuration</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]</span><br><span class="line">:<span class="hljs-keyword">FORWARD</span> ACCEPT[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]</span><br><span class="line">:OUTPUT ACCEPT[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]</span><br><span class="line">-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -jACCEPT</span><br><span class="line">-A INPUT -i lo -jACCEPT</span><br><span class="line">-A INPUT -p tcp -mstate --state <span class="hljs-keyword">NEW</span> -m tcp --dport <span class="hljs-number">22</span> -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state <span class="hljs-keyword">NEW</span> -m tcp --dport <span class="hljs-number">80</span> -jACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state <span class="hljs-keyword">NEW</span> -m tcp --dport <span class="hljs-number">8080</span>-j ACCEPT</span><br><span class="line">-A INPUT -j REJECT--reject-<span class="hljs-keyword">with</span> icmp-host-prohibited</span><br><span class="line">-A <span class="hljs-keyword">FORWARD</span> -jREJECT --reject-<span class="hljs-keyword">with</span> icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p>4、开启、停止<br><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看防火墙状态： </span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="hljs-comment"># 开启防火墙：</span></span><br><span class="line">service iptables start</span><br><span class="line"><span class="hljs-comment"># 关闭防火墙：</span></span><br><span class="line">service iptables stop</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;firewall防火墙&quot;&gt;&lt;a href=&quot;#firewall防火墙&quot; class=&quot;headerlink&quot; title=&quot;firewall防火墙&quot;&gt;&lt;/a&gt;firewall防火墙&lt;/h1&gt;&lt;p&gt;1、查看firewall服务状态&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="centos" scheme="http://mindasoft.com/tags/centos/"/>
    
      <category term="防火墙" scheme="http://mindasoft.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Logger4j详解</title>
    <link href="http://mindasoft.com/2017/12/27/Java/Logger4j%E8%AF%A6%E8%A7%A3/"/>
    <id>http://mindasoft.com/2017/12/27/Java/Logger4j详解/</id>
    <published>2017-12-27T05:51:44.000Z</published>
    <updated>2018-11-01T11:19:23.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件、甚至是套接口服务 器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</p><p>Log4j由三个重要的组件构成：日志信息的优先级（Loggers），日志信息的输出目的地（Appenders），日志信息的输出格式（Layouts）。日志信息的优先级从高到低有ERROR、WARN、 INFO、DEBUG，分别用来指定这条日志信息的重要程度；日志信息的输出目的地指定了日志将打印到控制台还是文件中；而输出格式则控制了日志信息的显示内容。</p><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><p>其实您也可以完全不使用配置文件，而是在代码中配置Log4j环境。但是，使用配置文件将使您的应用程序更加灵活。<br>Log4j支持两种配置文件格式，一种是XML格式的文件，一种是properties格式的文件。下面我们介绍使用properties格式做为配置文件的方法：<br>示例：<br>log4j.rootLogger=INFO, A1<br>log4j.appender.A1=org.apache.log4j.ConsoleAppender<br>log4j.appender.A1.layout=org.apache.log4j.PatternLayout<br>log4j.appender.A1.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</p><h2 id="1-配置根Logger，其语法为："><a href="#1-配置根Logger，其语法为：" class="headerlink" title="1. 配置根Logger，其语法为："></a>1. 配置根Logger，其语法为：</h2><p>log4j.rootLogger = [ level ] , appenderName, appenderName, …<br>其中，level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。</p><p>appenderName就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。</p><h2 id="2-配置日志信息输出目的地Appender，其语法为："><a href="#2-配置日志信息输出目的地Appender，其语法为：" class="headerlink" title="2. 配置日志信息输出目的地Appender，其语法为："></a>2. 配置日志信息输出目的地Appender，其语法为：</h2><p>log4j.appender.appenderName = package+appender_class_name<br>log4j.appender.appenderName.option1 = value1<br>…<br>log4j.appender.appenderName.option = valueN<br>其中，Log4j提供的appender有以下几种：<br>org.apache.log4j.ConsoleAppender（控制台），<br>org.apache.log4j.FileAppender（文件），<br>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），<br>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），<br>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方)</p><p>org.apache.log4j.jdbc.JDBCAppender(将日志写入数据库)</p><p>(1).ConsoleAppender选项<br>Threshold=WARN:指定日志消息的输出最低层次。<br>ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>Target=System.err：默认情况下是：System.out,指定输出控制台<br>(2).FileAppender 选项<br>Threshold=WARN:指定日志消息的输出最低层次。<br>ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>File=mylog.txt:指定消息输出到mylog.txt文件。<br>Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。<br>(3).DailyRollingFileAppender 选项<br>Threshold=WARN:指定日志消息的输出最低层次。<br>ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>File=mylog.txt:指定消息输出到mylog.txt文件。<br>Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。<br>DatePattern=’.’yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：<br>1)’.’yyyy-MM: 每月<br>2)’.’yyyy-ww: 每周<br>3)’.’yyyy-MM-dd: 每天<br>4)’.’yyyy-MM-dd-a: 每天两次<br>5)’.’yyyy-MM-dd-HH: 每小时<br>6)’.’yyyy-MM-dd-HH-mm: 每分钟<br>(4).RollingFileAppender 选项<br>Threshold=WARN:指定日志消息的输出最低层次。<br>ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。<br>File=mylog.txt:指定消息输出到mylog.txt文件。<br>Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。<br>MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。<br>MaxBackupIndex=2:指定可以产生的滚动文件的最大数。</p><p>(5). JDBCApperder选项</p><p>URL=jdbc:mysql://localhost:3306/test：指定日志写入的数据库链接<br>driver=com.mysql.jdbc.Driver：指定数据库驱动<br>user=root：指定数据库的用户名<br>password=123：指定数据库的登录密码<br>sql=insert into tb_log (message) values(‘=[%-5p] %d(%r) –&gt; [%t] %l: %m %x %n’)：指定写入数据库的执行语句</p><h2 id="3-配置日志信息的布局，其语法为："><a href="#3-配置日志信息的布局，其语法为：" class="headerlink" title="3. 配置日志信息的布局，其语法为："></a>3. 配置日志信息的布局，其语法为：</h2><p>log4j.appender.appenderName.layout = package+layout_class_name<br>log4j.appender.appenderName.layout.option1 = value1<br>…<br>log4j.appender.appenderName.layout.option = valueN<br>其中，Log4j提供的layout有以下几种：<br>org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br>org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p><h2 id="4、输出格式设置"><a href="#4、输出格式设置" class="headerlink" title="4、输出格式设置"></a>4、输出格式设置</h2><p>在配置文件中可以通过log4j.appender.A1.layout.ConversionPattern设置日志输出格式。<br>参数：<br>%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,<br>%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921</p><p>%r: 输出自应用启动到输出该log信息耗费的毫秒数<br>%c: 输出日志信息所属的类目，通常就是所在类的全名<br>%t: 输出产生该日志事件的线程名<br>%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)</p><p>%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。<br>%%: 输出一个”%”字符<br>%F: 输出日志消息产生时所在的文件名称<br>%L: 输出代码中的行号<br>%m: 输出代码中指定的消息,产生的日志具体信息<br>%n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行<br>可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：<br>1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。<br>2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。<br>3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。<br>4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。</p><h1 id="三、如何在不同的模块中输出不同的日志"><a href="#三、如何在不同的模块中输出不同的日志" class="headerlink" title="三、如何在不同的模块中输出不同的日志"></a>三、如何在不同的模块中输出不同的日志</h1><p>用户基础信息模块路径为：com.test.user<br>它下面有个类：com.test.user.service.impl.UserInfo<br>private Log log = LogFactory.getLog(UserInfo.class);</p><h2 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h2><p>在log4j.properties中加入:<br>log4j.logger.com.test.user=info,userLog,stdout<br>log4j.appender.userLog=org.apache.log4j.FileAppender<br>log4j.appender.userLog.File=../logs/userinfo.log<br>log4j.appender.userLog.Append=true<br>log4j.appender.userLog.Threshold=info<br>log4j.appender.userLog.layout=org.apache.log4j.PatternLayout<br>log4j.appender.userLog.layout.ConversionPattern==%d %p [%c] - %m%n</p><p>注：也就是让com.test.user模块下所有的logger使用log4j.appender.userLog所做的配置。</p><h2 id="方法2：自定义“别名”"><a href="#方法2：自定义“别名”" class="headerlink" title="方法2：自定义“别名”"></a>方法2：自定义“别名”</h2><p>private Log log = LogFactory.getLog(“userInfoLog”);<br>然后在log4j.properties中加入:<br>log4j.logger.userInfoLog=info,userLog,stdout<br>log4j.appender.userLog=org.apache.log4j.FileAppender<br>log4j.appender.userLog.File=../logs/userinfo.log<br>log4j.appender.userLog.Append=true<br>log4j.appender.userLog.Threshold=info<br>log4j.appender.userLog.layout=org.apache.log4j.PatternLayout<br>log4j.appender.userLog.layout.ConversionPattern==%d %p [%c] - %m%n</p><p>注：也就是在用logger时给它一个自定义的名字(如这里的”userInfoLog”)，然后在log4j.properties中做出相应配置即可。，在这种模式下，即使在同一个类中也能定义多个不同输出的log.</p><p>在类中调用代码如下：<br>private Log loggerError = LogFactory.getLog(“userErrorLog”);<br>private Log loggerInfo = LogFactory.getLog(“userInfoLog”);</p><p>自定义的日志默认是同时输出到log4j.rootLogger所配置的日志中的，如何能只让它们输出到自己指定的日志中呢？<br>log4j.additivity.userInfoLog = false<br>它用来设置是否同时输出到log4j.rootLogger所配置的日志中，设为false就不会输出到其它地方啦！注意这里的”userInfoLog”是你在程序中给logger起的那个自定义的名字！<br>如果你说，我只是不想同时输出这个日志到log4j.rootLogger所配置的logfile中，stdout里我还想同时输出呢！如：<br>log4j.logger.userInfoLog=DEBUG, userLog, stdout</p><h1 id="三、加载log4j-properties文件"><a href="#三、加载log4j-properties文件" class="headerlink" title="三、加载log4j.properties文件"></a>三、加载log4j.properties文件</h1><h2 id="1、spring方式加载，配置与web-xml中："><a href="#1、spring方式加载，配置与web-xml中：" class="headerlink" title="1、spring方式加载，配置与web.xml中："></a>1、spring方式加载，配置与web.xml中：</h2><p>Spring加载log4j.properties，它提供了一个Log4jConfigListener，本身就能通过web.xml配置从指定位置加载log4j配置文件和log4j的输出路径，要注意的是</p><p>Log4jConfigListener必须要在Spring的Listener之前。</p><p>web.xml<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 设置由Spring载入的Log4j配置文件位置 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>log4jConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>WEB-INF/classes/log4j.properties<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- Spring刷新Log4j配置文件变动的间隔,单位为毫秒 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>log4jRefreshInterval<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="2、可以通过资源类对资源文件进行加载，与使用为一体"><a href="#2、可以通过资源类对资源文件进行加载，与使用为一体" class="headerlink" title="2、可以通过资源类对资源文件进行加载，与使用为一体"></a>2、可以通过资源类对资源文件进行加载，与使用为一体</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger4JTest</span> &#123;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        PropertyConfigurator.configure(<span class="hljs-string">" D:/log/log4j.properties "</span>);  </span><br><span class="line">        Logger logger = Logger.getLogger(Logger4JTest.class);  </span><br><span class="line">        logger.debug(<span class="hljs-string">" debug "</span>);  </span><br><span class="line">        logger.error(<span class="hljs-string">" error "</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、在程序中的使用"><a href="#四、在程序中的使用" class="headerlink" title="四、在程序中的使用"></a>四、在程序中的使用</h1><p>在程序中使用Log4j之前，首先要将commons-logging.jar和logging-log4j-1.2.9.jar导入到classpath中，并将log4j.properties放于src根目录中。接下来就可以使用了。</p><h2 id="1-得到记录器"><a href="#1-得到记录器" class="headerlink" title="1.得到记录器"></a>1.得到记录器</h2><p>使用Log4j，第一步就是获取日志记录器，这个记录器将负责控制日志信息。其语法为：<br>public static Logger getLogger( String name)，<br>通过指定的名字获得记录器，如果必要的话，则为这个名字创建一个新的记录器。Name一般取本类的名字，比如：<br>static Logger logger = Logger.getLogger ( ServerWithLog4j.class.getName () ) ; </p><h2 id="2-插入记录信息（格式化日志信息）"><a href="#2-插入记录信息（格式化日志信息）" class="headerlink" title="2.插入记录信息（格式化日志信息）"></a>2.插入记录信息（格式化日志信息）</h2><p>当上两个必要步骤执行完毕，您就可以轻松地使用不同优先级别的日志记录语句插入到您想记录日志的任何地方，其语法如下：<br>logger.debug ( Object message ) ;<br>logger.info ( Object message ) ;<br>logger.warn ( Object message ) ;<br>logger.error ( Object message ) ;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h1&gt;&lt;p&gt;Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件、甚至
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Java" scheme="http://mindasoft.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>NIO框架的一点想法</title>
    <link href="http://mindasoft.com/2017/12/27/Java/NIO%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95/"/>
    <id>http://mindasoft.com/2017/12/27/Java/NIO框架的一点想法/</id>
    <published>2017-12-27T01:13:44.000Z</published>
    <updated>2017-12-27T01:20:36.272Z</updated>
    
    <content type="html"><![CDATA[<p>不管是什么NIO框架。本身其实都是对Java底层的一种在封装。封装一套更简便，更易于扩展的一套东西以方便开发者使用。所以性能上也许会有所差异，但是绝对没有java和C++之间这么多。(代码写的太烂的除外，不过想要使用java写出很烂的代码也比较困难。)这些框架在性能方面差别不会超过1%。</p><p>Mina和Netty开始。因为这两个NIO框架的创作者是同一个人Trustin Lee （韩国人）。GitHub主页地址 ：<a href="https://github.com/trustin。尽管创作者现在已经不专注与开发了。但是框架的后续开发和继承，可以说都是符合最开始的设定的。两个框架的架构设计思路基本一致。" target="_blank" rel="noopener">https://github.com/trustin。尽管创作者现在已经不专注与开发了。但是框架的后续开发和继承，可以说都是符合最开始的设定的。两个框架的架构设计思路基本一致。</a></p><p>Netty从某种程度上讲是Mina的延伸和扩展。解决了一些Mina上的设计缺陷，也优化了一下Mina上面的设计理念。</p><p>另一方面Netty相比较Mina更容易学习。API更简单。详细的范例源码和API文档。更活跃的论坛和社区。更高的代码更新维护速度。</p><p>我想不出什么理由来不选择Netty。</p><p>xSocket：是一个轻量级的基于nio的服务器框架用于开发高性能、可扩展、多线程的服务器。该框架封装了线程处理、异步读/写等方面。（只是对Java的NIO做了最简单的封装，以便于开发使用。）</p><p>Grizzly ： 是一种应用程序框架，专门解决编写成千上万用户访问服务器时候产生的各种问题。使用JAVA NIO作为基础，并隐藏其编程的复杂性。容易使用的高性能的API。带来非阻塞socketd到协议处理层。利用高性能的缓冲和缓冲管理使用高性能的线程池。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不管是什么NIO框架。本身其实都是对Java底层的一种在封装。封装一套更简便，更易于扩展的一套东西以方便开发者使用。所以性能上也许会有所差异，但是绝对没有java和C++之间这么多。(代码写的太烂的除外，不过想要使用java写出很烂的代码也比较困难。)这些框架在性能方面差别
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Java" scheme="http://mindasoft.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置文件详解</title>
    <link href="http://mindasoft.com/2017/12/15/server/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://mindasoft.com/2017/12/15/server/Nginx配置文件详解/</id>
    <published>2017-12-15T07:48:52.000Z</published>
    <updated>2018-11-01T11:19:23.674Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx配置文件nginx.conf中文详解</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="hljs-attribute">user</span> www www;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class="line"><span class="hljs-attribute">worker_processes</span> <span class="hljs-number">8</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line"><span class="hljs-attribute">error_log</span> /usr/local/nginx/logs/error.log <span class="hljs-literal">info</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#进程pid文件</span></span><br><span class="line"><span class="hljs-attribute">pid</span> /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="hljs-comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="hljs-comment">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="hljs-comment">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span></span><br><span class="line"><span class="hljs-comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line"><span class="hljs-attribute">worker_rlimit_nofile</span> <span class="hljs-number">65535</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class="line">    <span class="hljs-comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">    <span class="hljs-comment">#补充说明：</span></span><br><span class="line">    <span class="hljs-comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line">    <span class="hljs-comment">#A）标准事件模型</span></span><br><span class="line">    <span class="hljs-comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line">    <span class="hljs-comment">#B）高效事件模型</span></span><br><span class="line">    <span class="hljs-comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line">    <span class="hljs-comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line">    <span class="hljs-comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line">    <span class="hljs-comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line">    <span class="hljs-attribute">use</span> <span class="hljs-literal">epoll</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">    <span class="hljs-comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span></span><br><span class="line">    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">65535</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#keepalive超时时间。</span></span><br><span class="line">    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="hljs-comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line">    <span class="hljs-comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line">    <span class="hljs-comment">#4096</span></span><br><span class="line">    <span class="hljs-comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line">    <span class="hljs-attribute">client_header_buffer_size</span> <span class="hljs-number">4k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    <span class="hljs-attribute">open_file_cache</span> max=<span class="hljs-number">65535</span> inactive=<span class="hljs-number">60s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">    <span class="hljs-comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line">    <span class="hljs-attribute">open_file_cache_valid</span> <span class="hljs-number">80s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line">    <span class="hljs-comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line">    <span class="hljs-attribute">open_file_cache_min_uses</span> <span class="hljs-number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span></span><br><span class="line">    <span class="hljs-attribute">open_file_cache_errors</span> <span class="hljs-literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="hljs-attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#默认文件类型</span></span><br><span class="line">    <span class="hljs-attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#默认编码</span></span><br><span class="line">    <span class="hljs-comment">#charset utf-8;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="hljs-comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line">    <span class="hljs-attribute">server_names_hash_bucket_size</span> <span class="hljs-number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">    <span class="hljs-attribute">client_header_buffer_size</span> <span class="hljs-number">32k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    <span class="hljs-attribute">large_client_header_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">64k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#设定通过nginx上传文件的大小</span></span><br><span class="line">    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">8m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="hljs-comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line">    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class="line">    <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">120</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line">    <span class="hljs-attribute">fastcgi_connect_timeout</span> <span class="hljs-number">300</span>;</span><br><span class="line">    <span class="hljs-attribute">fastcgi_send_timeout</span> <span class="hljs-number">300</span>;</span><br><span class="line">    <span class="hljs-attribute">fastcgi_read_timeout</span> <span class="hljs-number">300</span>;</span><br><span class="line">    <span class="hljs-attribute">fastcgi_buffer_size</span> <span class="hljs-number">64k</span>;</span><br><span class="line">    <span class="hljs-attribute">fastcgi_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">64k</span>;</span><br><span class="line">    <span class="hljs-attribute">fastcgi_busy_buffers_size</span> <span class="hljs-number">128k</span>;</span><br><span class="line">    <span class="hljs-attribute">fastcgi_temp_file_write_size</span> <span class="hljs-number">128k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#gzip模块设置</span></span><br><span class="line">    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>; <span class="hljs-comment">#开启gzip压缩输出</span></span><br><span class="line">    <span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1k</span>;    <span class="hljs-comment">#最小压缩文件大小</span></span><br><span class="line">    <span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;    <span class="hljs-comment">#压缩缓冲区</span></span><br><span class="line">    <span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span>;    <span class="hljs-comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">    <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">2</span>;    <span class="hljs-comment">#压缩等级</span></span><br><span class="line">    <span class="hljs-attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;    <span class="hljs-comment">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">    <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line">    <span class="hljs-comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#负载均衡配置</span></span><br><span class="line">    <span class="hljs-attribute">upstream</span> piao.jd.com &#123;</span><br><span class="line">        <span class="hljs-comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.121:80</span> weight=<span class="hljs-number">3</span>;</span><br><span class="line">        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.122:80</span> weight=<span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.123:80</span> weight=<span class="hljs-number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">    <span class="hljs-comment">#1、轮询（默认）</span></span><br><span class="line">    <span class="hljs-comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">    <span class="hljs-comment">#upstream bakend &#123;</span></span><br><span class="line">    <span class="hljs-comment">#    server 192.168.0.14;</span></span><br><span class="line">    <span class="hljs-comment">#    server 192.168.0.15;</span></span><br><span class="line">    <span class="hljs-comment">#&#125;</span></span><br><span class="line">    <span class="hljs-comment">#2、weight</span></span><br><span class="line">    <span class="hljs-comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">    <span class="hljs-comment">#例如：</span></span><br><span class="line">    <span class="hljs-comment">#upstream bakend &#123;</span></span><br><span class="line">    <span class="hljs-comment">#    server 192.168.0.14 weight=10;</span></span><br><span class="line">    <span class="hljs-comment">#    server 192.168.0.15 weight=10;</span></span><br><span class="line">    <span class="hljs-comment">#&#125;</span></span><br><span class="line">    <span class="hljs-comment">#2、ip_hash</span></span><br><span class="line">    <span class="hljs-comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">    <span class="hljs-comment">#例如：</span></span><br><span class="line">    <span class="hljs-comment">#upstream bakend &#123;</span></span><br><span class="line">    <span class="hljs-comment">#    ip_hash;</span></span><br><span class="line">    <span class="hljs-comment">#    server 192.168.0.14:88;</span></span><br><span class="line">    <span class="hljs-comment">#    server 192.168.0.15:80;</span></span><br><span class="line">    <span class="hljs-comment">#&#125;</span></span><br><span class="line">    <span class="hljs-comment">#3、fair（第三方）</span></span><br><span class="line">    <span class="hljs-comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">    <span class="hljs-comment">#upstream backend &#123;</span></span><br><span class="line">    <span class="hljs-comment">#    server server1;</span></span><br><span class="line">    <span class="hljs-comment">#    server server2;</span></span><br><span class="line">    <span class="hljs-comment">#    fair;</span></span><br><span class="line">    <span class="hljs-comment">#&#125;</span></span><br><span class="line">    <span class="hljs-comment">#4、url_hash（第三方）</span></span><br><span class="line">    <span class="hljs-comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">    <span class="hljs-comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">    <span class="hljs-comment">#upstream backend &#123;</span></span><br><span class="line">    <span class="hljs-comment">#    server squid1:3128;</span></span><br><span class="line">    <span class="hljs-comment">#    server squid2:3128;</span></span><br><span class="line">    <span class="hljs-comment">#    hash $request_uri;</span></span><br><span class="line">    <span class="hljs-comment">#    hash_method crc32;</span></span><br><span class="line">    <span class="hljs-comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#tips:</span></span><br><span class="line">    <span class="hljs-comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">    <span class="hljs-comment">#    ip_hash;</span></span><br><span class="line">    <span class="hljs-comment">#    server 127.0.0.1:9090 down;</span></span><br><span class="line">    <span class="hljs-comment">#    server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">    <span class="hljs-comment">#    server 127.0.0.1:6060;</span></span><br><span class="line">    <span class="hljs-comment">#    server 127.0.0.1:7070 backup;</span></span><br><span class="line">    <span class="hljs-comment">#&#125;</span></span><br><span class="line">    <span class="hljs-comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#每个设备的状态设置为:</span></span><br><span class="line">    <span class="hljs-comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">    <span class="hljs-comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">    <span class="hljs-comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">    <span class="hljs-comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">    <span class="hljs-comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">    <span class="hljs-comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">    <span class="hljs-comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">    <span class="hljs-comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line">      </span><br><span class="line">    <span class="hljs-comment">#虚拟主机的配置</span></span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">#监听端口</span></span><br><span class="line">        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        <span class="hljs-attribute">server_name</span> www.jd.com jd.com;</span><br><span class="line">        <span class="hljs-attribute">index</span> index.html index.htm index.php;</span><br><span class="line">        <span class="hljs-attribute">root</span> /data/www/jd;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">#对******进行负载均衡</span></span><br><span class="line">        <span class="hljs-comment"># ~  波浪线表示执行一个正则匹配，区分大小写</span></span><br><span class="line">        <span class="hljs-comment"># ~* 表示执行一个正则匹配，不区分大小写</span></span><br><span class="line">        <span class="hljs-comment"># ^~ 表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录</span></span><br><span class="line">        <span class="hljs-comment"># =  进行普通字符精确匹配</span></span><br><span class="line">        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.(php|php5)?$</span></span><br><span class="line"><span class="hljs-regexp"></span>        &#123;</span><br><span class="line">            <span class="hljs-attribute">fastcgi_pass</span> <span class="hljs-number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="hljs-attribute">fastcgi_index</span> index.php;</span><br><span class="line">            <span class="hljs-attribute">include</span> fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#图片缓存时间设置</span></span><br><span class="line">        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line"><span class="hljs-regexp"></span>        &#123;</span><br><span class="line">            <span class="hljs-attribute">expires</span> <span class="hljs-number">10d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#JS和CSS缓存时间设置</span></span><br><span class="line">        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="hljs-regexp"></span>        &#123;</span><br><span class="line">            <span class="hljs-attribute">expires</span> <span class="hljs-number">1h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#日志格式设定</span></span><br><span class="line">        <span class="hljs-comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">        <span class="hljs-comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">        <span class="hljs-comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">        <span class="hljs-comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">        <span class="hljs-comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">        <span class="hljs-comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">        <span class="hljs-comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">        <span class="hljs-comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">        <span class="hljs-comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">        <span class="hljs-attribute">log_format</span> access <span class="hljs-string">'<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] "<span class="hljs-variable">$request</span>" '</span></span><br><span class="line">        <span class="hljs-string">'<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> "<span class="hljs-variable">$http_referer</span>" '</span></span><br><span class="line">        <span class="hljs-string">'"<span class="hljs-variable">$http_user_agent</span>" <span class="hljs-variable">$http_x_forwarded_for</span>'</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">        <span class="hljs-attribute">access_log</span>  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        <span class="hljs-attribute">access_log</span>  /usr/local/nginx/logs/host.access.<span class="hljs-number">404</span>.log  log404;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#对 "/" 启用反向代理</span></span><br><span class="line">        <span class="hljs-attribute">location</span> / &#123;</span><br><span class="line">            <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:88;</span><br><span class="line">            <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;</span><br><span class="line">            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="hljs-comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="hljs-comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">10m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">            <span class="hljs-comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">            <span class="hljs-comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class="line">            <span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">128k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">            <span class="hljs-attribute">proxy_intercept_errors</span> <span class="hljs-literal">on</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">            <span class="hljs-comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            <span class="hljs-comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">            <span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            <span class="hljs-comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">            <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            <span class="hljs-comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">            <span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">4k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">            <span class="hljs-comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">            <span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            <span class="hljs-attribute">proxy_busy_buffers_size</span> <span class="hljs-number">64k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">            <span class="hljs-comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">            <span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">64k</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#设定查看Nginx状态的地址</span></span><br><span class="line">        <span class="hljs-attribute">location</span> /NginxStatus &#123;</span><br><span class="line">            <span class="hljs-attribute">stub_status</span> <span class="hljs-literal">on</span>;</span><br><span class="line">            <span class="hljs-attribute">access_log</span> <span class="hljs-literal">on</span>;</span><br><span class="line">            <span class="hljs-attribute">auth_basic</span> <span class="hljs-string">"NginxStatus"</span>;</span><br><span class="line">            <span class="hljs-attribute">auth_basic_user_file</span> confpasswd;</span><br><span class="line">            <span class="hljs-comment">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#本地动静分离反向代理配置</span></span><br><span class="line">        <span class="hljs-comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class="line">            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</span><br><span class="line">            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;</span><br><span class="line">            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line">        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span></span><br><span class="line"><span class="hljs-regexp"></span>        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attribute">expires</span> <span class="hljs-number">15d</span>; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="hljs-regexp"></span>        &#123;</span><br><span class="line">            <span class="hljs-attribute">expires</span> <span class="hljs-number">1h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">######Nginx配置文件nginx.conf中文详解#####</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx配置文件nginx.conf中文详解&lt;/p&gt;
&lt;figure class=&quot;highlight nginx hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="nginx" scheme="http://mindasoft.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx在Linux下的安装</title>
    <link href="http://mindasoft.com/2017/12/15/server/Nginx%E5%AE%89%E8%A3%85/"/>
    <id>http://mindasoft.com/2017/12/15/server/Nginx安装/</id>
    <published>2017-12-15T07:28:52.000Z</published>
    <updated>2018-11-20T02:33:26.859Z</updated>
    
    <content type="html"><![CDATA[<p>系统平台：CentOS release 6.6 (Final) 64位。</p><h1 id="安装编译工具及库文件"><a href="#安装编译工具及库文件" class="headerlink" title="安装编译工具及库文件"></a>安装编译工具及库文件</h1><figure class="highlight nsis hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure><h1 id="首先要安装-PCRE"><a href="#首先要安装-PCRE" class="headerlink" title="首先要安装 PCRE"></a>首先要安装 PCRE</h1><p>PCRE 作用是让 Nginx 支持 Rewrite 功能。</p><p>1、下载 PCRE 安装包，下载地址： <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a><br><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ngnix src]<span class="hljs-meta"># wget http:<span class="hljs-comment">//downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</span></span></span><br></pre></td></tr></table></figure></p><p>2、解压安装包:<br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-attr">[root@ngnix src]</span># <span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">zxvf</span> <span class="hljs-selector-tag">pcre-8</span><span class="hljs-selector-class">.35</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span></span><br></pre></td></tr></table></figure></p><p>3、进入安装包目录<br><figure class="highlight autoit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="hljs-symbol">@ngnix</span> src]<span class="hljs-meta"># cd pcre-8.35</span></span><br></pre></td></tr></table></figure></p><p>4、编译安装<br><figure class="highlight autoit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="hljs-symbol">@ngnix</span> pcre<span class="hljs-number">-8.35</span>]<span class="hljs-meta"># ./configure</span></span><br><span class="line">[root<span class="hljs-symbol">@ngnix</span> pcre<span class="hljs-number">-8.35</span>]<span class="hljs-meta"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></p><p>5、查看pcre版本<br><figure class="highlight autoit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="hljs-symbol">@ngnix</span> pcre<span class="hljs-number">-8.35</span>]<span class="hljs-meta"># pcre-config --version</span></span><br></pre></td></tr></table></figure></p><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>1、下载 Nginx，下载地址：<a href="http://nginx.org/download/nginx-1.6.2.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.6.2.tar.gz</a><br><figure class="highlight 1c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ngnix src]<span class="hljs-meta"># wget http:<span class="hljs-comment">//nginx.org/download/nginx-1.6.2.tar.gz</span></span></span><br></pre></td></tr></table></figure></p><p>2、解压安装包<br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-attr">[root@ngnix src]</span># <span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">zxvf</span> <span class="hljs-selector-tag">nginx-1</span><span class="hljs-selector-class">.6</span><span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span></span><br></pre></td></tr></table></figure></p><p>3、进入安装包目录<br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-attr">[root@ngnix src]</span># <span class="hljs-selector-tag">cd</span> <span class="hljs-selector-tag">nginx-1</span><span class="hljs-selector-class">.6</span><span class="hljs-selector-class">.2</span></span><br></pre></td></tr></table></figure></p><p>4、编译安装<br><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="hljs-meta">@ngnix</span> nginx<span class="hljs-number">-1.6</span><span class="hljs-number">.2</span>]# ./configure --prefix=<span class="hljs-regexp">/usr/</span>local/webserver/nginx --<span class="hljs-keyword">with</span>-http_stub_status_module --<span class="hljs-keyword">with</span>-http_ssl_module --<span class="hljs-keyword">with</span>-pcre=<span class="hljs-regexp">/usr/</span>local/src/pcre<span class="hljs-number">-8.35</span></span><br><span class="line">[root<span class="hljs-meta">@ngnix</span> nginx<span class="hljs-number">-1.6</span><span class="hljs-number">.2</span>]# make</span><br><span class="line">[root<span class="hljs-meta">@ngnix</span> nginx<span class="hljs-number">-1.6</span><span class="hljs-number">.2</span>]# make install</span><br></pre></td></tr></table></figure></p><p>常用编译选项说明:</p><p>nginx大部分常用模块，编译时./configure –help以–without开头的都默认安装。</p><ul><li>–prefix=PATH ： 指定nginx的安装目录。默认 /usr/local/nginx</li><li>–conf-path=PATH ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf</li><li>–user=name： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。–group=name类似</li><li>–with-pcre ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用–with-pcre自动找到库文件。使用–with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本4.4 – 8.30）并解压，剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。</li><li>–with-zlib=PATH ： 指定 zlib（版本1.1.3 – 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib 。</li><li>–with-http_ssl_module ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装</li><li>–with-http_stub_status_module ： 用来监控 Nginx 的当前状态</li><li>–with-http_realip_module ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址</li><li>–add-module=PATH ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）<br>5、查看nginx版本<figure class="highlight gradle hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ngnix nginx-<span class="hljs-number">1.6</span>.<span class="hljs-number">2</span>]# <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -v</span><br></pre></td></tr></table></figure></li></ul><p>到此，nginx安装完成。</p><h1 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h1><p>创建 Nginx 运行使用的用户 www：<br><figure class="highlight autoit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="hljs-symbol">@ngnix</span> conf]<span class="hljs-meta"># /usr/sbin/groupadd www </span></span><br><span class="line">[root<span class="hljs-symbol">@ngnix</span> conf]<span class="hljs-meta"># /usr/sbin/useradd -g www www</span></span><br></pre></td></tr></table></figure></p><p>配置nginx.conf ，将/usr/local/webserver/nginx/conf/nginx.conf替换为以下内容<br><figure class="highlight stata hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ngnix <span class="hljs-keyword">conf</span>]#  <span class="hljs-keyword">cat</span> /usr/<span class="hljs-keyword">local</span>/webserver/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>显示如下：<br><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">user</span> www www;</span><br><span class="line"><span class="hljs-attribute">worker_processes</span> <span class="hljs-number">2</span>; <span class="hljs-comment">#设置值和CPU核心数一致</span></span><br><span class="line"><span class="hljs-attribute">error_log</span> /usr/local/webserver/nginx/logs/nginx_error.log <span class="hljs-literal">crit</span>; <span class="hljs-comment">#日志位置和日志级别</span></span><br><span class="line"><span class="hljs-attribute">pid</span> /usr/local/webserver/nginx/nginx.pid;</span><br><span class="line"><span class="hljs-comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class="line"><span class="hljs-attribute">worker_rlimit_nofile</span> <span class="hljs-number">65535</span>;</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attribute">use</span> <span class="hljs-literal">epoll</span>;</span><br><span class="line">  <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">65535</span>;</span><br><span class="line">&#125;</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attribute">include</span> mime.types;</span><br><span class="line">  <span class="hljs-attribute">default_type</span> application/octet-stream;</span><br><span class="line">  <span class="hljs-attribute">log_format</span> main  <span class="hljs-string">'<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] "<span class="hljs-variable">$request</span>" '</span></span><br><span class="line">               <span class="hljs-string">'<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> "<span class="hljs-variable">$http_referer</span>" '</span></span><br><span class="line">               <span class="hljs-string">'"<span class="hljs-variable">$http_user_agent</span>" <span class="hljs-variable">$http_x_forwarded_for</span>'</span>;</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">#charset gb2312;</span></span><br><span class="line">     </span><br><span class="line">  <span class="hljs-attribute">server_names_hash_bucket_size</span> <span class="hljs-number">128</span>;</span><br><span class="line">  <span class="hljs-attribute">client_header_buffer_size</span> <span class="hljs-number">32k</span>;</span><br><span class="line">  <span class="hljs-attribute">large_client_header_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;</span><br><span class="line">  <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">8m</span>;</span><br><span class="line">     </span><br><span class="line">  <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;</span><br><span class="line">  <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;</span><br><span class="line">  <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">60</span>;</span><br><span class="line">  <span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;</span><br><span class="line">  <span class="hljs-attribute">fastcgi_connect_timeout</span> <span class="hljs-number">300</span>;</span><br><span class="line">  <span class="hljs-attribute">fastcgi_send_timeout</span> <span class="hljs-number">300</span>;</span><br><span class="line">  <span class="hljs-attribute">fastcgi_read_timeout</span> <span class="hljs-number">300</span>;</span><br><span class="line">  <span class="hljs-attribute">fastcgi_buffer_size</span> <span class="hljs-number">64k</span>;</span><br><span class="line">  <span class="hljs-attribute">fastcgi_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">64k</span>;</span><br><span class="line">  <span class="hljs-attribute">fastcgi_busy_buffers_size</span> <span class="hljs-number">128k</span>;</span><br><span class="line">  <span class="hljs-attribute">fastcgi_temp_file_write_size</span> <span class="hljs-number">128k</span>;</span><br><span class="line">  <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>; </span><br><span class="line">  <span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1k</span>;</span><br><span class="line">  <span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;</span><br><span class="line">  <span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">2</span>;</span><br><span class="line">  <span class="hljs-attribute">gzip_types</span> text/html text/xml text/javascript application/x-javascript application/javascript text/css text/plain image/png image/jpeg image/gif;</span><br><span class="line">  <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="hljs-comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line"> <span class="hljs-comment">#下面是server虚拟主机的配置</span></span><br><span class="line"> server</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<span class="hljs-comment">#监听端口</span></span><br><span class="line">    <span class="hljs-attribute">server_name</span> localhost;<span class="hljs-comment">#域名</span></span><br><span class="line">    <span class="hljs-attribute">index</span> index.html index.htm index.php;</span><br><span class="line">    <span class="hljs-attribute">root</span> /usr/local/webserver/nginx/html;<span class="hljs-comment">#站点目录</span></span><br><span class="line">      <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*\.(php|php5)?$</span></span><br><span class="line"><span class="hljs-regexp"></span>    &#123;</span><br><span class="line">      <span class="hljs-comment">#fastcgi_pass unix:/tmp/php-cgi.sock;</span></span><br><span class="line">      <span class="hljs-attribute">fastcgi_pass</span> <span class="hljs-number">127.0.0.1:9000</span>;</span><br><span class="line">      <span class="hljs-attribute">fastcgi_index</span> index.php;</span><br><span class="line">      <span class="hljs-attribute">include</span> fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$</span></span><br><span class="line"><span class="hljs-regexp"></span>    &#123;</span><br><span class="line">      <span class="hljs-attribute">expires</span> <span class="hljs-number">30d</span>;</span><br><span class="line">  <span class="hljs-comment"># access_log off;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*\.(js|css)?$</span></span><br><span class="line"><span class="hljs-regexp"></span>    &#123;</span><br><span class="line">      <span class="hljs-attribute">expires</span> <span class="hljs-number">15d</span>;</span><br><span class="line">   <span class="hljs-comment"># access_log off;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>检查配置文件ngnix.conf的正确性命令：<br><figure class="highlight gradle hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ngnix conf]# <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -t</span><br></pre></td></tr></table></figure></p><h1 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h1><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx                      <span class="hljs-comment"># 启动 Nginx</span></span><br><span class="line"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -s reload            <span class="hljs-comment"># 重新载入配置文件</span></span><br><span class="line"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -s reopen            <span class="hljs-comment"># 重启 Nginx</span></span><br><span class="line"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/webserver/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx -s stop              <span class="hljs-comment"># 停止 Nginx</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统平台：CentOS release 6.6 (Final) 64位。&lt;/p&gt;
&lt;h1 id=&quot;安装编译工具及库文件&quot;&gt;&lt;a href=&quot;#安装编译工具及库文件&quot; class=&quot;headerlink&quot; title=&quot;安装编译工具及库文件&quot;&gt;&lt;/a&gt;安装编译工具及库文件&lt;/
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="nginx" scheme="http://mindasoft.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>idea的使用</title>
    <link href="http://mindasoft.com/2017/12/05/tools/idea%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://mindasoft.com/2017/12/05/tools/idea的使用/</id>
    <published>2017-12-05T05:16:08.000Z</published>
    <updated>2018-11-02T02:59:08.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-修改对应的配置信息-缓存-地址"><a href="#1-修改对应的配置信息-缓存-地址" class="headerlink" title="1 修改对应的配置信息(缓存)地址"></a>1 修改对应的配置信息(缓存)地址</h1><p>由于我家里的电脑C盘被我设置得超级小,然后Idea默认的各种系统配置,最主要是缓存的地址,修改 ${idea.home}/bin/idea.properties 修改下面几个值.</p><figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">15. <span class="hljs-comment">#---------------------------------------------------------------------  </span></span><br><span class="line">16. <span class="hljs-comment"># Uncomment this option if you want to customize path to IDE config folder. Make sure you're using forward slashes  </span></span><br><span class="line">17. <span class="hljs-comment">#---------------------------------------------------------------------  </span></span><br><span class="line">18. idea.config.path=D:<span class="hljs-string">/dev_soft/IntelliJ</span> IDEA 12.0.1/bin/<span class="hljs-string">.IntelliJIdea/config</span>  </span><br><span class="line">19.   </span><br><span class="line">20. <span class="hljs-comment">#---------------------------------------------------------------------  </span></span><br><span class="line">21. <span class="hljs-comment"># Uncomment this option if you want to customize path to IDE system folder. Make sure you're using forward slashes  </span></span><br><span class="line">22. <span class="hljs-comment">#---------------------------------------------------------------------  </span></span><br><span class="line">23. idea.system.path=D:<span class="hljs-string">/dev_soft/IntelliJ</span> IDEA 12.0.1/bin/<span class="hljs-string">.IntelliJIdea/system</span>  </span><br><span class="line">24.   </span><br><span class="line">25. <span class="hljs-comment">#---------------------------------------------------------------------  </span></span><br><span class="line">26. <span class="hljs-comment"># Uncomment this option if you want to customize path to user installed plugins folder. Make sure you're using forward slashes  </span></span><br><span class="line">27. <span class="hljs-comment">#---------------------------------------------------------------------  </span></span><br><span class="line">28. idea.plugins.path=D:<span class="hljs-string">/dev_soft/IntelliJ</span> IDEA 12.0.1/bin/<span class="hljs-string">.IntelliJIdea/config/plugins</span></span><br></pre></td></tr></table></figure><h1 id="2-修改快捷键"><a href="#2-修改快捷键" class="headerlink" title="2 修改快捷键"></a>2 修改快捷键</h1><p>  key/map 选择eclipse ,选择copy成自定义 (我还是习惯用eclipse的快捷键)</p><h1 id="3-配置修改"><a href="#3-配置修改" class="headerlink" title="3 配置修改"></a>3 配置修改</h1><p>1、修改主题 File | Settings | Appearance &amp; Behavior | Appearance ： Theme选择 Darcula<br>2、显示行号：Settings-&gt;Editor-&gt;Appearance标签项，勾选Show line numbers<br>3、选择字体大小：File | Settings | Editor | Font 15<br>4、Tab换成字符串 ：File | Settings | Editor | Code Style | Java –&gt; Use tab charactor<br>3、生成Serializable ID  ，setting–&gt;Editor–&gt;Inspactions–&gt;Java | Serialization issues | Serializable class without ‘serialVersionUID’ 打上勾<br>4、maven 工程 unable to read the metadata file for artifact 问题 :setting-&gt;maven-&gt;always update snapshot 打开,然后重新import change就搞定了.</p><h1 id="4、代码Templates"><a href="#4、代码Templates" class="headerlink" title="4、代码Templates"></a>4、代码Templates</h1><p>File | Settings | Editor | File and Code Templates –&gt; Includes–&gt;File Header<br>/**</p><ul><li>Company：MGTV</li><li>User: huangmin</li><li>DateTime: ${DATE} ${TIME}<br>*/</li></ul><p>File | Settings | Editor | Live Templates<br>添加Templates group ，再添加 Live Template。<br>private static final Logger LOGGER = LoggerFactory.getLogger($CLASS$.class);<br>点击$CLASS$  ，点击edit variables，选择getClassName()</p><h1 id="5、常用插件"><a href="#5、常用插件" class="headerlink" title="5、常用插件"></a>5、常用插件</h1><p>Mybatis<br>自动转换对象插件 generateO2O  快捷键 alt+insert<br> 快捷键提示插件Key Promoter<br>大小写转换插件  UpperLowerCapitalize  :  安装后快捷键alt+P全部大写     alt+L全部小写      alt+C开头字母大写<br>查看maven的依赖树 Maven Helper </p><h1 id="6、常用快捷键"><a href="#6、常用快捷键" class="headerlink" title="6、常用快捷键"></a>6、常用快捷键</h1><p>fori/sout/psvm+Tab<br>.for+Tab<br>.var+Tab</p><p>Top #10切来切去：Ctrl+Tab<br>Top #9选你所想：Ctrl+W<br>Top #8代码生成：Template/Postfix +Tab<br>Top #7发号施令：Ctrl+Shift+A<br>Top #6无处藏身：Shift+Shift<br>Top #5自动完成：Ctrl+Shift+Enter<br>Top #4创造万物：Alt+Insert</p><p>太难割舍，前三名并列吧！<br>Top #1智能补全：Ctrl+Shift+Space<br>Top #1自我修复：Alt+Enter<br>Top #1重构一切：Ctrl+Shift+Alt+T</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-修改对应的配置信息-缓存-地址&quot;&gt;&lt;a href=&quot;#1-修改对应的配置信息-缓存-地址&quot; class=&quot;headerlink&quot; title=&quot;1 修改对应的配置信息(缓存)地址&quot;&gt;&lt;/a&gt;1 修改对应的配置信息(缓存)地址&lt;/h1&gt;&lt;p&gt;由于我家里的电脑C盘
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Java" scheme="http://mindasoft.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>mysql事件（计划任务）</title>
    <link href="http://mindasoft.com/2017/09/04/Database/mysql%E4%BA%8B%E4%BB%B6%EF%BC%88%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%EF%BC%89/"/>
    <id>http://mindasoft.com/2017/09/04/Database/mysql事件（计划任务）/</id>
    <published>2017-09-04T07:16:08.000Z</published>
    <updated>2018-11-01T09:28:19.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h1><figure class="highlight coq hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line">-- <span class="hljs-number">1</span>、设置 全局变量event_scheduler开启，使用event必须开启</span><br><span class="line">-- SET GLOBAL event_scheduler = ON$$     -- required <span class="hljs-keyword">for</span> event to execute but not create    </span><br><span class="line"></span><br><span class="line">CREATE/*[DEFINER = &#123; user | <span class="hljs-type">CURRENT_USER</span> &#125;]*/EVENT `start_distribution`.`event_account_checking`</span><br><span class="line"></span><br><span class="line">ON SCHEDULE EVERY <span class="hljs-number">1</span> DAY STARTS '<span class="hljs-number">2017</span><span class="hljs-number">-09</span><span class="hljs-number">-04</span> <span class="hljs-number">06</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>' </span><br><span class="line">ON COMPLETION NOT PRESERVE</span><br><span class="line">ENABLE</span><br><span class="line">COMMENT '每天自动统计对账数据'</span><br><span class="line"></span><br><span class="line"> /* uncomment the example below you want to use */</span><br><span class="line"></span><br><span class="line">-- scheduleexample <span class="hljs-number">1</span>: run <span class="hljs-built_in">once</span>  执行一次</span><br><span class="line"></span><br><span class="line">   --  AT 'YYYY-MM-DD HH:MM.SS'/CURRENT_TIMESTAMP &#123; + INTERVAL <span class="hljs-number">1</span> [HOUR|<span class="hljs-type">MONTH</span>|<span class="hljs-type">WEEK</span>|<span class="hljs-type">DAY</span>|<span class="hljs-type">MINUTE</span>|<span class="hljs-type">...] &#125;</span></span><br><span class="line"><span class="hljs-type"></span></span><br><span class="line"><span class="hljs-type">-- scheduleexample</span> <span class="hljs-number">2</span>: run <span class="hljs-built_in">at</span> intervals forever <span class="hljs-built_in">after</span> creation  创建后每多久执行一次</span><br><span class="line"></span><br><span class="line">   -- EVERY <span class="hljs-number">1</span> [HOUR|<span class="hljs-type">MONTH</span>|<span class="hljs-type">WEEK</span>|<span class="hljs-type">DAY</span>|<span class="hljs-type">MINUTE</span>|<span class="hljs-type">...]</span></span><br><span class="line"><span class="hljs-type"></span></span><br><span class="line"><span class="hljs-type">-- scheduleexample</span> <span class="hljs-number">3</span>: specified start <span class="hljs-built_in">time</span>, <span class="hljs-keyword">end</span> <span class="hljs-built_in">time</span> and interval <span class="hljs-keyword">for</span> execution 指定开始开始、结束时间和间隔时间执行任务。</span><br><span class="line">   /*EVERY <span class="hljs-number">1</span>  [HOUR|<span class="hljs-type">MONTH</span>|<span class="hljs-type">WEEK</span>|<span class="hljs-type">DAY</span>|<span class="hljs-type">MINUTE</span>|<span class="hljs-type">...]</span></span><br><span class="line"><span class="hljs-type"></span></span><br><span class="line"><span class="hljs-type">   STARTS</span> CURRENT_TIMESTAMP/'YYYY-MM-DD HH:MM.SS' &#123; + INTERVAL <span class="hljs-number">1</span>[HOUR|<span class="hljs-type">MONTH</span>|<span class="hljs-type">WEEK</span>|<span class="hljs-type">DAY</span>|<span class="hljs-type">MINUTE</span>|<span class="hljs-type">...] &#125;</span></span><br><span class="line"><span class="hljs-type"></span></span><br><span class="line"><span class="hljs-type">   ENDS</span> CURRENT_TIMESTAMP/'YYYY-MM-DD HH:MM.SS' &#123; + INTERVAL <span class="hljs-number">1</span> [HOUR|<span class="hljs-type">MONTH</span>|<span class="hljs-type">WEEK</span>|<span class="hljs-type">DAY</span>|<span class="hljs-type">MINUTE</span>|<span class="hljs-type">...] &#125; */</span></span><br><span class="line"><span class="hljs-type"></span></span><br><span class="line"><span class="hljs-type">/*[ON</span> COMPLETION [NOT] PRESERVE]  -- 执行后删除(NOT)还是保留</span><br><span class="line">[ENABLE | <span class="hljs-type">DISABLE</span>]  -- 创建时，event的章台</span><br><span class="line">[COMMENT 'comment']*/  -- 注释</span><br><span class="line"></span><br><span class="line">DO</span><br><span class="line">BEGIN</span><br><span class="line">    call pro_account_checking();</span><br><span class="line">END$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;例子：&quot;&gt;&lt;a href=&quot;#例子：&quot; class=&quot;headerlink&quot; title=&quot;例子：&quot;&gt;&lt;/a&gt;例子：&lt;/h1&gt;&lt;figure class=&quot;highlight coq hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Database" scheme="http://mindasoft.com/tags/Database/"/>
    
      <category term="mysql" scheme="http://mindasoft.com/tags/mysql/"/>
    
      <category term="计划任务" scheme="http://mindasoft.com/tags/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>mysql存储过程</title>
    <link href="http://mindasoft.com/2017/08/18/Database/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://mindasoft.com/2017/08/18/Database/mysql存储过程/</id>
    <published>2017-08-18T07:16:08.000Z</published>
    <updated>2018-11-01T09:28:09.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>存储过程</strong>是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。当想要在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。</p><p>存储过程是数据库的一个重要的功能，MySQL 5.0以前并不支持存储过程，这使得MySQL在应用上大打折扣。好在MySQL 5.0开始支持存储过程，这样即可以大大提高数据库的处理速度，同时也可以提高数据库编程的灵活性。</p><h1 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h1><p>(1).增强SQL语言的功能和灵活性：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p><p>(2).标准组件式编程：存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</p><p>(3).较快的执行速度：如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。</p><p>(4).减少网络流量：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。</p><p>(5).作为一种安全机制来充分利用：通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight n1ql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line">USE `start_user`$$</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-symbol">`rob_test`</span>$$</span><br><span class="line"><span class="hljs-keyword">CREATE</span></span><br><span class="line">    <span class="hljs-comment">/*[DEFINER = &#123; user | CURRENT_USER &#125;]*/</span></span><br><span class="line"></span><br><span class="line">-- <span class="hljs-number">0</span>、定义存储过程名称和参数、返回值</span><br><span class="line">-- <span class="hljs-keyword">in</span> 为输入参数；out 为返回值，inout 即是参数也是返回值 </span><br><span class="line">    <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-symbol">`start_user`</span>.<span class="hljs-symbol">`rob_test`</span>( out msg VARCHAR(<span class="hljs-number">50</span>) )</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/* LANGUAGE SQL</span></span><br><span class="line"><span class="hljs-comment">    | [NOT] DETERMINISTIC</span></span><br><span class="line"><span class="hljs-comment">    | &#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</span></span><br><span class="line"><span class="hljs-comment">    | SQL SECURITY &#123; DEFINER | INVOKER &#125;</span></span><br><span class="line"><span class="hljs-comment">    | COMMENT 'string'</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">BEGIN</span></span><br><span class="line">-- <span class="hljs-number">1</span>、声明变量</span><br><span class="line"><span class="hljs-keyword">DECLARE</span> userId int;</span><br><span class="line">DECLARE i int;</span><br><span class="line">DECLARE phoneId BIGint;</span><br><span class="line"></span><br><span class="line">-- 2、赋值，也可以用DEFAULT，如：DECLARE i int DEFAULT 0;</span><br><span class="line">SET i=0;</span><br><span class="line">SET phoneId= 11010000002;</span><br><span class="line"></span><br><span class="line">-- 3、业务逻辑，此处用循环插入数据</span><br><span class="line">while i&lt;5 do</span><br><span class="line"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`start_user`</span>.<span class="hljs-symbol">`user`</span> (<span class="hljs-symbol">`nickName`</span>, <span class="hljs-symbol">`gender`</span>, <span class="hljs-symbol">`mobile`</span>, <span class="hljs-symbol">`signatureText`</span>, <span class="hljs-symbol">`avatarUrl`</span>, <span class="hljs-symbol">`userType`</span>, <span class="hljs-symbol">`isUserGroup`</span>, <span class="hljs-symbol">`status`</span>, <span class="hljs-symbol">`channel`</span>, <span class="hljs-symbol">`inviteGuestPermission`</span>, <span class="hljs-symbol">`reported`</span>, <span class="hljs-symbol">`flag`</span>, <span class="hljs-symbol">`appId`</span>, <span class="hljs-symbol">`loginBundleId`</span>) <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">'机器人'</span>,i),<span class="hljs-string">'MALE'</span>,CONCAT(phoneId,<span class="hljs-string">''</span>),<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-string">'NORMAL'</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-string">'1'</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);</span><br><span class="line"><span class="hljs-keyword">SELECT</span> LAST_INSERT_ID() <span class="hljs-keyword">INTO</span> userId ; </span><br><span class="line"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-symbol">`start_distribution`</span>.<span class="hljs-symbol">`dis_org_startuser`</span> ( <span class="hljs-symbol">`orgId`</span>, <span class="hljs-symbol">`agentId`</span>, <span class="hljs-symbol">`cooperatorId`</span>, <span class="hljs-symbol">`opcenterId`</span>, <span class="hljs-symbol">`startUserId`</span>, <span class="hljs-symbol">`startUserType`</span>, <span class="hljs-symbol">`inviteUserId`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">'999992348'</span>,<span class="hljs-string">'999992347'</span>,<span class="hljs-string">'999992346'</span>,<span class="hljs-string">'999992345'</span>,userId,<span class="hljs-string">'ANCHOR'</span>,<span class="hljs-literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">set i=i+1;</span><br><span class="line">set phoneId= phoneId+1;</span><br><span class="line">end while;</span><br><span class="line"></span><br><span class="line">-- 4、结束循环，设定返回值</span><br><span class="line">set msg ='执行成功';</span><br><span class="line">    END$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>CREATE PROCEDURE 过程名([[IN|OUT|INOUT] 参数名 数据类型[,[IN|OUT|INOUT] 参数名 数据类型…]]) [特性 …] 过程体</p><h2 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h2><p>DELIMITER 定义语句结束符。首先将结束符变为“$$”,在完成存储过程之后再将结束符改为默认的“;”。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用”,”分割开。MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT:</p><p><strong>IN</strong>：参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值<br><strong>OUT</strong>:该值可在存储过程内部被改变，并可返回<br><strong>INOUT</strong>:调用时指定，并且可被改变和返回</p><h2 id="过程体"><a href="#过程体" class="headerlink" title="过程体"></a>过程体</h2><p>过程体的开始与结束使用BEGIN与END进行标识。</p><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>语法：SET 变量名 = 变量值 [,变量名= 变量值 …]</p><h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><p>用户变量一般以@开头<br>注意：滥用用户变量会导致程序难以理解及管理</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>MySQL存储过程可使用两种风格的注释：<br>双杠：–，该风格一般用于单行注释<br>C风格： 一般用于多行注释</p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>用call和你过程名以及一个括号，括号里面根据需要，加入参数，参数包括输入参数、输出参数、输入输出参数。</p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="IF-THEN-ELSE语句"><a href="#IF-THEN-ELSE语句" class="headerlink" title="IF-THEN-ELSE语句"></a>IF-THEN-ELSE语句</h4><figure class="highlight oxygene hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DROP <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">IF</span> <span class="hljs-title">EXISTS</span> <span class="hljs-title">proc3</span>;</span></span><br><span class="line">DELIMITER <span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">proc3</span><span class="hljs-params">(<span class="hljs-keyword">IN</span> parameter int)</span></span></span><br><span class="line"><span class="hljs-function">  <span class="hljs-title">BEGIN</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">DECLARE</span> <span class="hljs-title">var</span> <span class="hljs-title">int</span>;</span></span><br><span class="line">    <span class="hljs-keyword">SET</span> <span class="hljs-keyword">var</span>=parameter+<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">IF</span> <span class="hljs-keyword">var</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span></span><br><span class="line">      INSERT <span class="hljs-keyword">INTO</span> t VALUES (<span class="hljs-number">17</span>);</span><br><span class="line">    <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span> ;</span><br><span class="line">    <span class="hljs-keyword">IF</span> parameter=<span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span></span><br><span class="line">      UPDATE t <span class="hljs-keyword">SET</span> s1=s1+<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">ELSE</span></span><br><span class="line">      UPDATE t <span class="hljs-keyword">SET</span> s1=s1+<span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span> ;</span><br><span class="line">  <span class="hljs-keyword">END</span> ;</span><br><span class="line">  <span class="hljs-comment">//</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h4 id="CASE-WHEN-THEN-ELSE语句"><a href="#CASE-WHEN-THEN-ELSE语句" class="headerlink" title="CASE-WHEN-THEN-ELSE语句"></a>CASE-WHEN-THEN-ELSE语句</h4><figure class="highlight oxygene hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="hljs-comment">//</span></span><br><span class="line">  <span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">proc4</span> <span class="hljs-params">(<span class="hljs-keyword">IN</span> parameter INT)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">BEGIN</span></span></span><br><span class="line"><span class="hljs-function">      <span class="hljs-title">DECLARE</span> <span class="hljs-title">var</span> <span class="hljs-title">INT</span>;</span></span><br><span class="line">      <span class="hljs-keyword">SET</span> <span class="hljs-keyword">var</span>=parameter+<span class="hljs-number">1</span>;</span><br><span class="line">      <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">var</span></span><br><span class="line">        WHEN <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span></span><br><span class="line">          INSERT <span class="hljs-keyword">INTO</span> t VALUES (<span class="hljs-number">17</span>);</span><br><span class="line">        WHEN <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span></span><br><span class="line">          INSERT <span class="hljs-keyword">INTO</span> t VALUES (<span class="hljs-number">18</span>);</span><br><span class="line">        <span class="hljs-keyword">ELSE</span></span><br><span class="line">          INSERT <span class="hljs-keyword">INTO</span> t VALUES (<span class="hljs-number">19</span>);</span><br><span class="line">      <span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span> ;</span><br><span class="line">    <span class="hljs-keyword">END</span> ;</span><br><span class="line">  <span class="hljs-comment">//</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="WHILE-DO…END-WHILE"><a href="#WHILE-DO…END-WHILE" class="headerlink" title="WHILE-DO…END-WHILE"></a>WHILE-DO…END-WHILE</h4><figure class="highlight oxygene hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="hljs-comment">//</span></span><br><span class="line">  <span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">proc5</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">BEGIN</span></span></span><br><span class="line"><span class="hljs-function">      <span class="hljs-title">DECLARE</span> <span class="hljs-title">var</span> <span class="hljs-title">INT</span>;</span></span><br><span class="line">      <span class="hljs-keyword">SET</span> <span class="hljs-keyword">var</span>=<span class="hljs-number">0</span>;</span><br><span class="line">      <span class="hljs-keyword">WHILE</span> <span class="hljs-keyword">var</span>&lt;<span class="hljs-number">6</span> <span class="hljs-keyword">DO</span></span><br><span class="line">        INSERT <span class="hljs-keyword">INTO</span> t VALUES (<span class="hljs-keyword">var</span>);</span><br><span class="line">        <span class="hljs-keyword">SET</span> <span class="hljs-keyword">var</span>=<span class="hljs-keyword">var</span>+<span class="hljs-number">1</span>;</span><br><span class="line">      <span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span> ;</span><br><span class="line">    <span class="hljs-keyword">END</span>;</span><br><span class="line">  <span class="hljs-comment">//</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h4 id="REPEAT…END-REPEAT"><a href="#REPEAT…END-REPEAT" class="headerlink" title="REPEAT…END REPEAT"></a>REPEAT…END REPEAT</h4><p>此语句的特点是执行操作后检查结果<br><figure class="highlight oxygene hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="hljs-comment">//</span></span><br><span class="line">  <span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">proc6</span> <span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">BEGIN</span></span></span><br><span class="line"><span class="hljs-function">      <span class="hljs-title">DECLARE</span> <span class="hljs-title">v</span> <span class="hljs-title">INT</span>;</span></span><br><span class="line">      <span class="hljs-keyword">SET</span> v=<span class="hljs-number">0</span>;</span><br><span class="line">      <span class="hljs-keyword">REPEAT</span></span><br><span class="line">        INSERT <span class="hljs-keyword">INTO</span> t VALUES(v);</span><br><span class="line">        <span class="hljs-keyword">SET</span> v=v+<span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">UNTIL</span> v&gt;=<span class="hljs-number">5</span></span><br><span class="line">      <span class="hljs-keyword">END</span> <span class="hljs-keyword">REPEAT</span>;</span><br><span class="line">    <span class="hljs-keyword">END</span>;</span><br><span class="line">  <span class="hljs-comment">//</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><h4 id="LOOP…END-LOOP"><a href="#LOOP…END-LOOP" class="headerlink" title="LOOP…END LOOP"></a>LOOP…END LOOP</h4><figure class="highlight oxygene hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="hljs-comment">//</span></span><br><span class="line">  <span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">proc7</span> <span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">BEGIN</span></span></span><br><span class="line"><span class="hljs-function">      <span class="hljs-title">DECLARE</span> <span class="hljs-title">v</span> <span class="hljs-title">INT</span>;</span></span><br><span class="line">      <span class="hljs-keyword">SET</span> v=<span class="hljs-number">0</span>;</span><br><span class="line">      LOOP_LABLE:<span class="hljs-keyword">LOOP</span></span><br><span class="line">        INSERT <span class="hljs-keyword">INTO</span> t VALUES(v);</span><br><span class="line">        <span class="hljs-keyword">SET</span> v=v+<span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">IF</span> v &gt;=<span class="hljs-number">5</span> <span class="hljs-keyword">THEN</span></span><br><span class="line">          LEAVE LOOP_LABLE;</span><br><span class="line">        <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;</span><br><span class="line">      <span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;</span><br><span class="line">    <span class="hljs-keyword">END</span>;</span><br><span class="line">  <span class="hljs-comment">//</span></span><br><span class="line">DELIMITER ;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### LABLES标号</span><br><span class="line">标号可以用在<span class="hljs-keyword">begin</span> <span class="hljs-keyword">repeat</span> <span class="hljs-keyword">while</span> 或者<span class="hljs-keyword">loop</span> 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</span><br><span class="line"></span><br><span class="line">#### ITERATE迭代</span><br><span class="line"></span><br><span class="line">通过引用复合语句的标号,来从新开始复合语句</span><br><span class="line"></span><br><span class="line">### ITERATE</span><br></pre></td></tr></table></figure><p>DELIMITER //<br>  CREATE PROCEDURE proc8()<br>  BEGIN<br>    DECLARE v INT;<br>    SET v=0;<br>    LOOP_LABLE:LOOP<br>      IF v=3 THEN<br>        SET v=v+1;<br>        ITERATE LOOP_LABLE;<br>      END IF;<br>      INSERT INTO t VALUES(v);<br>      SET v=v+1;<br>      IF v&gt;=5 THEN<br>        LEAVE LOOP_LABLE;<br>      END IF;<br>    END LOOP;<br>  END;<br>  //<br>DELIMITER ;<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;存储过程&lt;/strong&gt;是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。当想要在不同的应用程序或平台
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Database" scheme="http://mindasoft.com/tags/Database/"/>
    
      <category term="mysql" scheme="http://mindasoft.com/tags/mysql/"/>
    
      <category term="存储过程" scheme="http://mindasoft.com/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java配置中心</title>
    <link href="http://mindasoft.com/2017/08/08/Java/Java%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>http://mindasoft.com/2017/08/08/Java/Java配置中心/</id>
    <published>2017-08-08T03:45:04.000Z</published>
    <updated>2017-12-05T02:41:49.301Z</updated>
    
    <content type="html"><![CDATA[<p>阿里：Diamond<br><a href="https://github.com/hengyunabc/xdiamond" target="_blank" rel="noopener">https://github.com/hengyunabc/xdiamond</a><br><a href="https://yq.aliyun.com/articles/6058" target="_blank" rel="noopener">https://yq.aliyun.com/articles/6058</a></p><p>携程：Apollo<br><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D</a><br><a href="https://github.com/ctripcorp/apollo/wiki/Quick-Start" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/wiki/Quick-Start</a></p><p>Spring: Spring Cload Config<br><a href="https://github.com/spring-cloud/spring-cloud-config" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-config</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿里：Diamond&lt;br&gt;&lt;a href=&quot;https://github.com/hengyunabc/xdiamond&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hengyunabc/xdiamond&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Java" scheme="http://mindasoft.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>FreeMarker简单介绍</title>
    <link href="http://mindasoft.com/2017/05/30/Java/FreeMarker%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://mindasoft.com/2017/05/30/Java/FreeMarker简单介绍/</id>
    <published>2017-05-30T12:13:44.000Z</published>
    <updated>2017-12-05T02:41:49.300Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="programming" scheme="http://mindasoft.com/categories/programming/"/>
    
    
      <category term="Java" scheme="http://mindasoft.com/tags/Java/"/>
    
  </entry>
  
</feed>
